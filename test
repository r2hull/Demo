private void processingRefundBooking(String bulkId, List<String[]> refundData, BulkRefundBooking bulkRefundBooking) {
    logger.info("Processing refund booking for bulkId: {}", bulkId);
    int totalRecords = refundData.size() - 1;
    int validRecords = 0;

    // Initialize BulkRefundBooking
    bulkRefundBooking.setTotalRecords(totalRecords);
    bulkRefundBooking.setBulkRefundStatus(BulkRefundStatus.IN_QUEUE.name());
    refundDao.saveBulkRefundBooking(bulkRefundBooking);

    // Process each row
    for (int row = 1; row <= totalRecords; row++) {
        BulkRefundBookingDetails details = buildBulkRefundBookingDetails(bulkId, row, refundData.get(row));
        details = refundDao.saveBulkRefundBookingDetailsForRow(details);

        // Send valid rows to Kafka
        if (StringUtils.equals(details.getRefundStatus(), RefundStatus.INITIATED.name())) {
            refundBookingDetailsProducer.publish("BOOKING_DETAILS", details.getId().toString(), details.getId());
            validRecords++;
            logger.info("Row {} queued for bulkId: {}", row, bulkId);
        } else {
            logger.info("Row {} invalid for bulkId: {}", row, bulkId);
        }
    }

    // Update record counts
    bulkRefundBooking.setValidRecords(validRecords);
    bulkRefundBooking.setInvalidRecords(totalRecords - validRecords);

    // Check if all rows are processed
    long processedCount = refundDao.countProcessedRowsByBulkId(bulkId);
    if (processedCount >= totalRecords) {
        bulkRefundBooking.setBulkRefundStatus(BulkRefundStatus.PROCESSED.name());
        logger.info("All rows processed for bulkId: {}. Status: PROCESSED.", bulkId);
    }

    refundDao.saveBulkRefundBooking(bulkRefundBooking);
}




private void checkAndUpdateBulkRefundBooking(String bulkId) {
    BulkRefundBooking booking = refundDao.findByBulkId(bulkId);
    long processedCount = refundDao.countProcessedRowsByBulkId(bulkId);
    if (processedCount >= booking.getTotalRecords()) {
        booking.setBulkRefundStatus(BulkRefundStatus.PROCESSED.name());
        refundDao.saveBulkRefundBooking(booking);
        logger.info("BulkId: {} fully processed. Status: PROCESSED.", bulkId);
    }
}




@Query("SELECT COUNT(d) FROM BulkRefundBookingDetails d WHERE d.bulkId = :bulkId AND d.refundStatus IS NOT NULL")
long countProcessedRowsByBulkId(@Param("bulkId") String bulkId);


public void processBulkRefundRow(UUID bookingDetailsId) {
    logger.info("Processing BulkRefundBookingDetails id: {}", bookingDetailsId);

    // Fetch details
    BulkRefundBookingDetails details = refundDao.findBulkRefundBookingDetailsById(bookingDetailsId);

    // Skip if already failed
    if (StringUtils.equals(details.getRefundStatus(), RefundStatus.REFUND_FAILED.name())) {
        logger.info("Row {} already failed for bulkId: {}", details.getRowNumber(), details.getBulkId());
        checkAndUpdateBulkRefundBooking(details.getBulkId());
        return;
    }

    // Process refund
    TransactionResponse<RefundResponse> bulkRefundResponse = bookBulkRefund(details);

    // Update details
    if (StringUtils.equals(bulkRefundResponse.getStatus(), TransactionConstant.RESPONSE_SUCCESS)) {
        details.setRefundStatus(bulkRefundResponse.getData().getFirst().getRefundStatus());
        details.setRemark("Refund Booked Successfully");
    } else {
        details.setRefundStatus(RefundStatus.REFUND_FAILED.name());
        details.setRemark(bulkRefundResponse.getErrors().getFirst().getErrorMessage());
    }

    refundDao.saveBulkRefundBookingDetails(details);
    checkAndUpdateBulkRefundBooking(details.getBulkId());
}



