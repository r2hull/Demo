public class JdbcQuery {

    public static final String INSERT_MERCHANT_PAYOUT_HISTORY = """
        INSERT INTO MERCHANT_TXN_MULTI_ACC_PAYOUT_HISTORY (
            MTMAP_ID, RFS_ID, MTP_ID, MERCHANT_ID,
            MERCHANT_ACC_PAYOUT, BANK_ID, BANK_IFSC_CODE,
            BANK_ACC_NUMBER, REMARK
        )
        SELECT
            m.MTMAP_ID, m.RFS_ID, m.MTP_ID, m.MERCHANT_ID,
            m.MERCHANT_ACC_PAYOUT, m.BANK_ID, m.BANK_IFSC_CODE,
            m.BANK_ACC_NUMBER, m.REMARK
        FROM MERCHANT_TXN_MULTI_ACC_PAYOUT m
        JOIN RECON_FILE_SUMMARY r ON m.RFS_ID = r.RFS_ID
        WHERE r.PAYOUT_STATUS = 'SUCCESS'
        """;

    public static final String DELETE_MERCHANT_PAYOUT_MAIN = """
        DELETE FROM MERCHANT_TXN_MULTI_ACC_PAYOUT
        WHERE RFS_ID IN (
            SELECT RFS_ID FROM RECON_FILE_SUMMARY WHERE PAYOUT_STATUS = 'SUCCESS'
        )
        """;
}



@Repository
@RequiredArgsConstructor
public class MerchantPayoutJdbcRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final Logger log = LoggerFactory.getLogger(MerchantPayoutJdbcRepository.class);

    public void archiveMerchantPayouts() {
        try {
            int inserted = jdbcTemplate.update(JdbcQuery.INSERT_MERCHANT_PAYOUT_HISTORY, new HashMap<>());
            log.info("‚úÖ Inserted {} rows into MERCHANT_TXN_MULTI_ACC_PAYOUT_HISTORY", inserted);
        } catch (Exception ex) {
            log.error("‚ùå Error inserting into history", ex);
        }
    }

    public void deleteMerchantPayouts() {
        try {
            int deleted = jdbcTemplate.update(JdbcQuery.DELETE_MERCHANT_PAYOUT_MAIN, new HashMap<>());
            log.info("üóëÔ∏è Deleted {} rows from MERCHANT_TXN_MULTI_ACC_PAYOUT", deleted);
        } catch (Exception ex) {
            log.error("‚ùå Error deleting from main table", ex);
        }
    }
}



