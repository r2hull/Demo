package com.epay.merchant.util;

import com.epay.merchant.exception.MerchantException;
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import com.sun.speech.freetts.audio.AudioPlayer;
import com.sun.speech.freetts.audio.SingleFileAudioPlayer;
import lombok.experimental.UtilityClass;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sound.sampled.AudioFileFormat;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.UUID;
import java.util.stream.IntStream;


/**
 * Class Name: VoiceCaptchaUtil
 * *
 * Description: Utility class for generating voice captcha audio files.
 * *
 * Author: Bhoopendra Rajput
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.1
 */
@UtilityClass
public class VoiceCaptchaUtil {

    private static final Logger logger = LoggerFactory.getLogger(VoiceCaptchaUtil.class);
    private static final String VOICE_NAME = "kevin16";

    static {
        System.setProperty("freetts.voices", "com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");
    }

    /**
     * Converts text to speech and returns audio as a byte array.
     *
     * @param text      the text to convert to speech.
     * @param requestId the requestId for tracking.
     * @return byte array containing the speech audio.
     */
    public static byte[] generateAudioCaptcha(String text, UUID requestId) {
        File tempFile = createTempFile(requestId);
        if (tempFile == null) return new byte[0];

        try {
            Voice voice = initializeVoice();
            if (voice == null) return new byte[0];

            SingleFileAudioPlayer audioPlayer = configureAudioPlayer(tempFile);
            voice.setAudioPlayer(audioPlayer);

            speakCharacters(voice, text);
            cleanupResources(voice, audioPlayer);

            return validateAndReturnAudio(tempFile, requestId);
        } catch (Exception e) {
            logger.error("Error generating speech audio for requestId: {}", requestId, e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, requestId));
        } finally {
            deleteTempFile(tempFile);
        }
    }

    private static File createTempFile(UUID requestId) {
        try {
            File tempFile = File.createTempFile("speech_" + System.currentTimeMillis() + "_" + requestId, ".wav");
            tempFile.deleteOnExit();
            return tempFile;
        } catch (IOException e) {
            logger.error("Failed to create temp file for requestId: {}", requestId, e);
            return null;
        }
    }

    private static Voice initializeVoice() {
        Voice voice = VoiceManager.getInstance().getVoice(VOICE_NAME);
        if (voice == null) {
            logger.error("Voice '{}' not found.", VOICE_NAME);
            return null;
        }
        voice.allocate();
        voice.setRate(130);
        voice.setPitch(100);
        voice.setVolume(1.0f);
        return voice;
    }

    private static SingleFileAudioPlayer configureAudioPlayer(File tempFile) {
        return new SingleFileAudioPlayer(tempFile.getAbsolutePath().replace(".wav", ""), AudioFileFormat.Type.WAVE);
    }

    private static void speakCharacters(Voice voice, String text) {
        text.chars()
                .mapToObj(c -> String.valueOf((char) c))
                .filter(ch -> ch.matches("[a-zA-Z0-9]"))
                .forEach(ch -> {
                    voice.speak(ch);
                    sleep(10);
                });
    }

    private static void cleanupResources(Voice voice, SingleFileAudioPlayer audioPlayer) {
        voice.deallocate();
        audioPlayer.close();
    }

    private static byte[] validateAndReturnAudio(File tempFile, UUID requestId) {
        if (!tempFile.exists() || tempFile.length() == 0) {
            logger.error("Generated audio file is empty or missing for requestId: {}", requestId);
            return new byte[0];
        }
        return fileToByteArray(tempFile);
    }

    private static void deleteTempFile(File tempFile) {
        if (tempFile != null && tempFile.exists() && !tempFile.delete()) {
            logger.warn("Failed to delete temporary file: {}", tempFile.getAbsolutePath());
        }
    }

    private static void sleep(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }


    private static byte[] fileToByteArray(File file) {
        try (FileInputStream fis = new FileInputStream(file);
             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, bytesRead);
            }

            return byteArrayOutputStream.toByteArray();

        } catch (IOException e) {
            logger.error("Error reading file to byte array: {}", file.getAbsolutePath(), e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, file.getName()));
        }
    }
}
