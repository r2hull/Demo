@Test
void testGenerateApiKey_NullResponse() {
    when(kmsClient.generateAPIKeys(anyString(), anyInt())).thenReturn(null);

    MerchantException exception = assertThrows(MerchantException.class, () -> keyDao.generateApiKey(MID));
    assertEquals(ERROR_MESSAGE, exception.getMessage());
}

@Test
void testGenerateApiKey_InvalidMerchantId() {
    when(kmsClient.generateAPIKeys(eq("invalidMerchantId"), anyInt()))
            .thenReturn(createMerchantResponse(null, MerchantConstant.RESPONSE_FAILURE, null));

    MerchantException exception = assertThrows(MerchantException.class, () -> keyDao.generateApiKey("invalidMerchantId"));
    assertEquals(ERROR_MESSAGE, exception.getMessage());
}

@Test
void testSaveNotification_NullMerchantInfo() {
    when(merchantInfoDao.getMerchantByMIdAndStatus(MID, MerchantStatus.ACTIVE.name())).thenReturn(null);

    assertThrows(MerchantException.class, () -> keyDao.saveNotification(KeyType.API, KEY_ID, "content", MID));
}

@Test
void testSaveNotification_InvalidEmail() {
    MerchantInfo merchantInfo = MerchantInfo.builder().id(KEY_ID).build();
    when(merchantInfoDao.getMerchantByMIdAndStatus(MID, MerchantStatus.ACTIVE.name())).thenReturn(merchantInfo);

    doThrow(new MerchantException("Invalid Email")).when(notificationDao).sendEmailNotification(any(), any());

    assertThrows(MerchantException.class, () -> keyDao.saveNotification(KeyType.API, KEY_ID, "content", MID));
}

@Test
void testGetMerchantEncryptionKeys_EmptyResponse() {
    MerchantResponse<KMSEncryptionKeysResponse> emptyResponse = createMerchantResponse(null, MerchantConstant.RESPONSE_SUCCESS, null);
    when(kmsClient.getEncryptionKeys(MID)).thenReturn(emptyResponse);

    MerchantResponse<KMSEncryptionKeysResponse> response = keyDao.getMerchantEncryptionKeys(MID);
    assertTrue(response.getData().isEmpty());
}

@Test
void testGetMerchantEncryptionKeys_FailureResponse() {
    MerchantResponse<KMSEncryptionKeysResponse> failureResponse = createMerchantResponse(null, MerchantConstant.RESPONSE_FAILURE, null);
    when(kmsClient.getEncryptionKeys(MID)).thenReturn(failureResponse);

    MerchantException exception = assertThrows(MerchantException.class, () -> keyDao.getMerchantEncryptionKeys(MID));
    assertEquals("Failed to fetch encryption keys.", exception.getMessage());
}

@Test
void testValidatedAPIKey_InvalidRequest() {
    APIKeyValidationRequest invalidRequest = APIKeyValidationRequest.builder().apiKeySecret(null).apiKey(null).build();

    MerchantException exception = assertThrows(MerchantException.class, () -> keyDao.validatedAPIKey(invalidRequest));
    assertEquals(ErrorConstants.INVALID_ERROR_CODE, exception.getErrorCode());
}