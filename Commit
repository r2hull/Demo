@Cacheable(value = "merchantPricingCache", key = "#pricingRequest.merchantId")
public ResponseDto<MerchantPricingResponseDto> getMerchantPricing(MerchantPricingRequestDto pricingRequest) {
    logger.info("Fetching merchant pricing from cache.");

    List<MerchantPricing> merchantPricingList = merchantPricingDao.getMerchantPricing(pricingRequest);

    if (merchantPricingList.isEmpty()) {
        logger.error("Merchant pricing not found in database.");
        return ResponseDto.<MerchantPricingResponseDto>builder()
                .status(Status.FAIL.getValue())
                .total(0L)
                .count(0L)
                .data(List.of())
                .errors(List.of(ErrorDto.builder()
                        .errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE)
                        .errorMessage(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Pricing detail"))
                        .reason(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, "Pricing detail"))
                        .build()))
                .build();
    }

    MerchantPricing merchantPricing = merchantPricingList.getFirst();
    MerchantPricingResponseDto merchantPricingResponseDto = MerchantPricingResponseDto.builder().build();

    BeanUtils.copyProperties(merchantPricing.getPricingRequestDto(), merchantPricingResponseDto);
    BeanUtils.copyProperties(merchantPricing, merchantPricingResponseDto);

    // Save to cache
    merchantPricingCacheRepository.save(merchantPricing);

    logger.info("Merchant pricing saved to cache.");

    return ResponseDto.<MerchantPricingResponseDto>builder()
            .status(Status.SUCCESS.getValue())
            .total(1L)
            .count(1L)
            .errors(List.of())
            .data(List.of(merchantPricingResponseDto))
            .build();
}