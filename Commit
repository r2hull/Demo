@PostMapping("/regenerate")
@Operation(summary = "Regenerate Captcha API.", description = "Create Captcha creation API for given Request Type")
public ResponseEntity<MultiValueMap<String, Object>> regenerateCaptcha(@RequestBody CaptchaRequest captchaRequest) {
    logger.info("Received request to generate captcha with requestId: {}", captchaRequest.getRequestId());
    return captchaService.regenerateCaptcha(captchaRequest);
}

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.mock.web.MockMultipartFile;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

@Service
@RequiredArgsConstructor
public class CaptchaService {

    // Other dependencies...

    public ResponseEntity<MultiValueMap<String, Object>> regenerateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        
        // Validate the Captcha Request
        captchaValidator.regenerateValidator(captchaRequest);
        
        // Generate Captcha and Audio
        return saveCaptchaAsMultipart(captchaRequest, true);
    }

    private ResponseEntity<MultiValueMap<String, Object>> saveCaptchaAsMultipart(CaptchaRequest captchaRequest, boolean retry) {
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
        
        // Step 1: Generate Captcha Text
        String captchaText = captchaProducer.createText();
        
        // Step 2: Generate Captcha Image and convert into Base64
        String base64Image = generateCaptchaImage(captchaText);
        InputStream imageStream = new ByteArrayInputStream(Base64.getDecoder().decode(base64Image));
        MultipartFile imageFile = new MockMultipartFile("captchaImage", "captchaImage.jpg", "image/jpeg", imageStream);
        
        // Step 3: Generate Captcha Audio and convert into Base64
        String base64Audio = VoiceCaptchaUtil.generateAudioCaptcha(captchaText);
        InputStream audioStream = new ByteArrayInputStream(Base64.getDecoder().decode(base64Audio));
        MultipartFile audioFile = new MockMultipartFile("captchaAudio", "captchaAudio.wav", "audio/wav", audioStream);
        
        // Step 4: Save the Captcha into DB
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);

        // Step 5: Build the Multipart Response
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("image", imageFile);
        body.add("audio", audioFile);

        // Response headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        return ResponseEntity.ok()
                .headers(headers)
                .body(body);
    }
}