private File createTempFile(UUID requestId) {
    try {
        // Ensure temp directory is properly configured
        String tempDirConfig = merchantConfig.getTempDir();
        if (tempDirConfig == null || tempDirConfig.trim().isEmpty()) {
            logger.warn("Temporary directory not configured, falling back to default.");
            return null; // Return null, allowing the response to contain only the image
        }

        Path tempDir = Paths.get(tempDirConfig).normalize().toAbsolutePath();
        if (!Files.exists(tempDir)) {
            Files.createDirectories(tempDir); // Ensure directory exists
        }

        // Use SecureRandom for unpredictable file names
        SecureRandom random = new SecureRandom();
        String randomSuffix = Long.toHexString(random.nextLong());

        Path tempFilePath = Files.createTempFile(tempDir, "speech_" + randomSuffix + "_", ".wav").normalize();

        // Validate that tempFilePath is inside tempDir (prevent path traversal attacks)
        if (!tempFilePath.startsWith(tempDir)) {
            logger.warn("Unauthorized temp file path detected: {}", tempFilePath);
            return null; // Return null, fallback to image-only response
        }

        // Set restrictive permissions (only for Unix/Linux)
        try {
            Files.setPosixFilePermissions(tempFilePath, PosixFilePermissions.fromString("rw-------"));
        } catch (UnsupportedOperationException ignored) {
            // Ignore if running on Windows
        }

        logger.debug("Temporary file securely created: {}", tempFilePath);
        return tempFilePath.toFile();

    } catch (IOException e) {
        logger.warn("Failed to create secure temp file for requestId: {}", requestId, e);
        return null; // Return null if file creation fails, image-only response
    }
}