import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.epay.reporting.dao.ReportManagementDao;
import com.epay.reporting.dto.ReportManagementDto;
import com.epay.reporting.entity.ReportManagement;
import com.epay.reporting.util.enums.ReportStatus;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.repository.ReportManagementRepository;
import com.epay.reporting.mapper.ReportManagementMapper;
import com.epay.reporting.model.request.ReportManagementRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.Optional;
import java.util.UUID;

class ReportManagementDaoTest {

    @Mock
    private ReportManagementRepository reportManagementRepository;

    @Mock
    private ReportManagementMapper mapper;

    @Mock
    private ReportMasterDao reportMasterDao;

    private ReportManagementDao reportManagementDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        reportManagementDao = new ReportManagementDao(reportManagementRepository, mapper, reportMasterDao, null);
    }

    @Test
    void testUpdateReportStatus() {
        // Arrange
        UUID reportManagementId = UUID.randomUUID();
        ReportStatus newStatus = ReportStatus.GENERATED;

        // Create a mock ReportManagement entity with an initial status
        ReportManagement reportManagement = new ReportManagement();
        reportManagement.setId(reportManagementId);
        reportManagement.setStatus(ReportStatus.TO_BE_GENERATE);  // Initial status

        // Mock the behavior of the repository to return the report management entity
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportManagementId), anyList()))
                .thenReturn(Optional.of(reportManagement));

        // Mock the mapper to return the DTO when the entity is converted
        ReportManagementDto reportManagementDto = new ReportManagementDto();
        when(mapper.mapEntityToDto(reportManagement)).thenReturn(reportManagementDto);

        // Act
        ReportManagementDto result = reportManagementDao.updateReportStatus(reportManagementId, newStatus);

        // Assert
        assertNotNull(result);
        assertEquals(newStatus, reportManagement.getStatus());  // Ensure the status is updated
        verify(reportManagementRepository).save(reportManagement);  // Verify that save is called
    }

    @Test
    void testUpdateReportStatus_ThrowsException_WhenReportNotFound() {
        // Arrange
        UUID reportManagementId = UUID.randomUUID();
        ReportStatus newStatus = ReportStatus.GENERATED;

        // Mock the behavior of the repository to return an empty Optional (i.e., report not found)
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportManagementId), anyList()))
                .thenReturn(Optional.empty());

        // Act & Assert
        ReportingException thrown = assertThrows(ReportingException.class, () -> {
            reportManagementDao.updateReportStatus(reportManagementId, newStatus);
        });

        assertEquals("Report not found", thrown.getMessage());  // Adjust this message based on your exception handling
    }
}