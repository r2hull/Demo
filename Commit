public ResponseDto<MerchantPricingResponseDto> getMerchantPricing(MerchantPricingRequestDto pricingRequest) {
    logger.info("Checking cache for merchant pricing.");

    // Check if data is in cache
    List<MerchantPricing> cachedPricingList = merchantPricingCacheRepository.getPricing(
            pricingRequest.getMId(),
            pricingRequest.getPayModeCode(),
            pricingRequest.getGtwMapsId(),
            pricingRequest.getPayProcType(),
            pricingRequest.getTransactionAmount());

    if (!cachedPricingList.isEmpty()) {
        logger.info("Merchant pricing found in cache.");
        return buildSuccessResponse(cachedPricingList);
    }

    logger.info("Cache miss. Fetching merchant pricing from database.");
    // If not in cache, fetch from DB
    List<MerchantPricing> merchantPricingList = merchantPricingDao.getMerchantPricing(pricingRequest);

    if (merchantPricingList.isEmpty()) {
        logger.error("Merchant pricing not found in database.");
        return buildErrorResponse();
    }

    // Save to cache
    List<MerchantPricingEntity> pricingEntities = merchantPricingList.stream().map(pricing -> {
        MerchantPricingEntity entity = new MerchantPricingEntity();
        BeanUtils.copyProperties(pricing, entity);
        return entity;
    }).collect(Collectors.toList());

    merchantPricingCacheRepository.saveAll(pricingEntities);
    logger.info("Merchant pricing saved to cache.");

    return buildSuccessResponse(merchantPricingList);
}