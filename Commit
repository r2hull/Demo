
    @Test
    void testGenerateReport_Success_OrderReport() {
        // Arrange
        ReportManagementDto reportManagementDto = new ReportManagementDto();
        reportManagementDto.setId(reportManagementId);
        reportManagementDto.setReport(Report.ORDER);
        reportManagementDto.setMId("MID123");
        reportManagementDto.setFormat(ReportFormat.CSV);
        reportManagementDto.setDurationFromDate(1L);
        reportManagementDto.setDurationToDate(1L);

        List<OrderReport> orderReports = List.of(OrderReport.builder().transactionDate("1L").mId("mid").orderAmount(BigDecimal.valueOf(100.0)).customerId("customerId").transactionCurrency("USD").sbiOrderRefNumber("RefNum").status("status").attempts(1).build());

        when(reportManagementDao.updateReportStatus(reportManagementId, ReportStatus.GENERATION_STARTED)).thenReturn(reportManagementDto);
        when(reportDao.getOrderReportData("mid", 1L, 1L)).thenReturn(orderReports);
        List<Object> objectList=Arrays.asList(OrderReport.builder().mId("mid").customerId("customerId").attempts(1).status("status").build());
        List<List<Object>> fileData=Arrays.asList(objectList);
        List<String> header=Arrays.asList("header1","header2");
        FileModel fileModel1 = mock(FileModel.class);
        when(fileGeneratorService.buildFileModel(ReportFormat.CSV,header, fileData, Collections.emptyMap())).thenReturn(fileModel1);
        File file = new File("dummyPath");
        when(fileGeneratorService.fileGenerator(ReportFormat.CSV, Report.ORDER, "mid", fileModel1)).thenReturn(file);

        // Act
        reportService.generateReport(reportManagementId);

        // Assert
        verify(reportManagementDao).updateStatusAndFilePath(reportManagementIdCaptor.capture(), eq(ReportStatus.GENERATED), eq("dummyPath"));
        assert reportManagementIdCaptor.getValue().equals(reportManagementId);
    }
