package com.epay.merchant.service;

import com.epay.merchant.dao.CaptchaDao;
import com.epay.merchant.dto.CaptchaDto;
import com.epay.merchant.mapper.CaptchaMapper;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.model.response.CaptchaResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantUtil;
import com.epay.merchant.util.VoiceCaptchaUtil;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.validator.CaptchaValidator;
import com.sbi.epay.captcha.impl.DefaultKaptcha;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Base64;
import java.util.UUID;
import java.util.Optional;


import static com.epay.merchant.util.MerchantConstant.RESPONSE_SUCCESS;

@Service
@RequiredArgsConstructor
public class CaptchaService {

    private final CaptchaDao captchaDao;
    private final DefaultKaptcha captchaProducer;
    private final CaptchaValidator captchaValidator;
    private final CaptchaMapper captchaMapper;

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    
    public MerchantResponse<CaptchaResponse> generateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        //Step 1 : Validate Captcha Request
        //captchaValidator.requestValidator(captchaRequest);
        return saveCaptcha(captchaRequest, false);
    }


   
    public MerchantResponse<CaptchaResponse> regenerateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        //Step 1 : Validate Captcha Request
        captchaValidator.regenerateValidator(captchaRequest);
        return saveCaptcha(captchaRequest, true);
    }

 
    private String generateCaptchaImage(String captchaText) {
        logger.info("generated captcha text: {}", captchaText);
        BufferedImage image = captchaProducer.createImage(captchaText);
        return MerchantUtil.convertImageToBase64(image, "Captcha");
    }

    private MerchantResponse<CaptchaResponse> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
        //Step 2 : Generate Captcha Text
        String captchaText = captchaProducer.createText();
        //Step 3 : Generate Captcha Image and convert into Base 64
        String base64Image = generateCaptchaImage(captchaText);
        String base64Audio = generateCaptchaAudio(captchaText, captchaRequest.getRequestId());
        //Step 3 : Save the Captcha into DB
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);
        //Step 4 : Build the Merchant Response
        logger.info("generate captcha completed for RequestId: {}", captchaRequest.getRequestId());
        return MerchantResponse.<CaptchaResponse>builder().data(List.of(captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image,base64Audio))).status(RESPONSE_SUCCESS).build();
    }

    
    public String generateCaptchaAudio(String captchaText, UUID requestId) {
        logger.info("Started generateAudioCaptcha for requestId: {}", requestId);

        return Optional.ofNullable(captchaText)
                .map(text -> VoiceCaptchaUtil.generateAudioCaptcha(text, requestId))
                .map(data -> VoiceCaptchaUtil.encodeToBase64(data, requestId))
                .orElseGet(() -> {
                    logger.warn("Captcha text is null for requestId: {}", requestId);
                    return "";
                });
    }
}





package com.epay.merchant.util;

import com.epay.merchant.exception.MerchantException;
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import com.sun.speech.freetts.audio.SingleFileAudioPlayer;
import lombok.experimental.UtilityClass;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sound.sampled.AudioFileFormat;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Base64;
import java.util.Optional;
import java.util.UUID;

@UtilityClass
public class VoiceCaptchaUtil {

    private static final Logger logger = LoggerFactory.getLogger(VoiceCaptchaUtil.class);
    private static final String VOICE_NAME = "kevin16";
    private static final int SLEEP_TIME = 10;

    static {
        System.setProperty("freetts.voices", "com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");
    }

    public static byte[] generateAudioCaptcha(String text, UUID requestId) {
        logger.info("Generating audio captcha for requestId: {}", requestId);
        File tempFile = createTempFile(requestId);
        if (tempFile == null){
            logger.error("Temp file creation failed for requestId: {}", requestId);
            return new byte[0];
        }

        try {
            Voice voice = initializeVoice();
            if (voice == null) {
                logger.error("Voice initialization failed for requestId: {}", requestId);
                return new byte[0];
            }

            SingleFileAudioPlayer audioPlayer = configureAudioPlayer(tempFile);
            voice.setAudioPlayer(audioPlayer);

            speakCharacters(voice, text);
            cleanupResources(voice, audioPlayer);

            return validateAndReturnAudio(tempFile, requestId);
        } catch (Exception e) {
            logger.error("Error generating speech audio for requestId: {}", requestId, e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, requestId));
        } finally {
            deleteTempFile(tempFile);
        }
    }

   
    private static File createTempFile(UUID requestId) {
        try {
            File tempFile = File.createTempFile("speech_" + System.currentTimeMillis() + "_" + requestId, ".wav");
            tempFile.deleteOnExit();
            logger.debug("Temporary file created: {}", tempFile.getAbsolutePath());
            return tempFile;
        } catch (IOException e) {
            logger.error("Failed to create temp file for requestId: {}", requestId, e);
            return null;
        }
    }

    
    private static Voice initializeVoice() {
        Voice voice = VoiceManager.getInstance().getVoice(VOICE_NAME);
        if (voice == null) {
            logger.error("Voice '{}' not found.", VOICE_NAME);
            return null;
        }
        voice.allocate();
        voice.setRate(130);
        voice.setPitch(100);
        voice.setVolume(1.0f);
        logger.debug("Voice '{}' initialized successfully.", VOICE_NAME);
        return voice;
    }

   
    private static SingleFileAudioPlayer configureAudioPlayer(File tempFile) {
        return new SingleFileAudioPlayer(tempFile.getAbsolutePath().replace(".wav", ""), AudioFileFormat.Type.WAVE);
    }

   
    private static void speakCharacters(Voice voice, String text) {
        logger.debug("Speaking text: {}", text);
        text.chars()
                .forEach(ch -> {
                    voice.speak( String.valueOf((char) c));
                });
    }

  
    private static void cleanupResources(Voice voice, SingleFileAudioPlayer audioPlayer) {
        voice.deallocate();
        audioPlayer.close();
        logger.debug("Resources cleaned up successfully.");
    }

 
    private static byte[] validateAndReturnAudio(File tempFile, UUID requestId) {
        if (!tempFile.exists() || tempFile.length() == 0) {
            logger.error("Generated audio file is empty or missing for requestId: {}", requestId);
            return new byte[0];
        }
        logger.info("Audio file successfully generated for requestId: {}", requestId);
        return fileToByteArray(tempFile);
    }



    private static void deleteTempFile(File tempFile) {
        if (tempFile != null && tempFile.exists() && !tempFile.delete()) {
            logger.warn("Failed to delete temporary file: {}", tempFile.getAbsolutePath());
        }

    }
  
    private static byte[] fileToByteArray(File file) {
        try (FileInputStream fis = new FileInputStream(file);
             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, bytesRead);
            }
            logger.debug("File successfully converted to byte array: {}", file.getAbsolutePath());
            return byteArrayOutputStream.toByteArray();

        } catch (IOException e) {
            logger.error("Error reading file to byte array: {}", file.getAbsolutePath(), e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, file.getName()));
        }
    }

  
    public String encodeToBase64(byte[] data, UUID requestId) {
        return Optional.ofNullable(data)
                .filter(d -> d.length > 0)
                .map(Base64.getEncoder()::encodeToString)
                .orElseGet(() -> {
                    logger.warn("Empty byte array for requestId: {}", requestId);
                    return "";
                });
    }
}
