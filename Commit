import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.epay.reporting.dao.ReportManagementDao;
import com.epay.reporting.dto.ReportManagementDto;
import com.epay.reporting.entity.ReportManagement;
import com.epay.reporting.util.enums.ReportStatus;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.repository.ReportManagementRepository;
import com.epay.reporting.mapper.ReportManagementMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.Optional;
import java.util.UUID;

class ReportManagementDaoTest {

    @Mock
    private ReportManagementRepository reportManagementRepository;

    @Mock
    private ReportManagementMapper mapper;

    @Mock
    private ReportMasterDao reportMasterDao;

    private ReportManagementDao reportManagementDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        reportManagementDao = new ReportManagementDao(reportManagementRepository, mapper, reportMasterDao, null);
    }

    @Test
    void testUpdateStatusAndRemarks() {
        // Arrange
        UUID reportManagementId = UUID.randomUUID();
        ReportStatus newStatus = ReportStatus.GENERATED;
        String newRemarks = "Generation successful";

        // Create a mock ReportManagement entity with an initial status
        ReportManagement reportManagement = new ReportManagement();
        reportManagement.setId(reportManagementId);
        reportManagement.setStatus(ReportStatus.TO_BE_GENERATE);  // Initial status
        reportManagement.setRemarks("Initial remarks");

        // Mock the behavior of the repository to return the report management entity
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportManagementId), anyList()))
                .thenReturn(Optional.of(reportManagement));

        // Act
        reportManagementDao.updateStatusAndRemarks(reportManagementId, newStatus, newRemarks);

        // Assert
        assertEquals(newStatus, reportManagement.getStatus());  // Ensure the status is updated
        assertEquals(newRemarks, reportManagement.getRemarks());  // Ensure the remarks are updated
        verify(reportManagementRepository).save(reportManagement);  // Verify that save is called
    }

    @Test
    void testUpdateStatusAndRemarks_ThrowsException_WhenReportNotFound() {
        // Arrange
        UUID reportManagementId = UUID.randomUUID();
        ReportStatus newStatus = ReportStatus.GENERATED;
        String newRemarks = "Generation failed";

        // Mock the behavior of the repository to return an empty Optional (i.e., report not found)
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportManagementId), anyList()))
                .thenReturn(Optional.empty());

        // Act & Assert
        ReportingException thrown = assertThrows(ReportingException.class, () -> {
            reportManagementDao.updateStatusAndRemarks(reportManagementId, newStatus, newRemarks);
        });

        assertEquals("Report not found", thrown.getMessage());  // Adjust this message based on your exception handling
    }
}