@Bean
public ItemWriter<ReportManagement> reportScheduleItemWriter(ReportManagementRepository reportManagementRepository) {
    return items -> {
        reportManagementRepository.saveAll(items); // Save processed items in the database
        System.out.println("Saved processed items to DB: " + items);
    };
}

@Configuration
@RequiredArgsConstructor
public class ReportScheduleBatchConfig {

    private final ReportScheduleManagementRepository reportScheduleManagementRepository;
    private final ReportManagementRepository reportManagementRepository;

    @Bean
    public Job reportScheduleJob(JobRepository jobRepository, Step reportScheduleStep) {
        return new JobBuilder("reportScheduleJob", jobRepository)
                .start(reportScheduleStep)
                .build();
    }

    @Bean
    public Step reportScheduleStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        return new StepBuilder("reportScheduleStep", jobRepository)
                .<ReportScheduleManagement, ReportManagement>chunk(10, transactionManager)
                .reader(reportScheduleItemReader())
                .processor(reportScheduleItemProcessor())
                .writer(reportScheduleItemWriter(reportManagementRepository))
                .build();
    }

    @Bean
    public ItemReader<ReportScheduleManagement> reportScheduleItemReader() {
        return new RepositoryItemReaderBuilder<ReportScheduleManagement>()
                .repository(reportScheduleManagementRepository)
                .methodName("findByStatusAndNextScheduleExecutionTime")
                .arguments(List.of(
                        ReportScheduledStatus.TO_BE_START, 
                        System.currentTimeMillis(), 
                        System.currentTimeMillis() + 30 * 60 * 1000))
                .pageSize(10)
                .build();
    }

    @Bean
    public ItemProcessor<ReportScheduleManagement, ReportManagement> reportScheduleItemProcessor() {
        return schedule -> {
            schedule.setLastScheduleExecutionTime(System.currentTimeMillis());
            return ReportManagement.builder()
                    .reportId(schedule.getReportId())
                    .mId(schedule.getMId())
                    .format(schedule.getFormat())
                    .scheduledId(schedule.getId())
                    .durationFromDate(DateTimeUtils.calculateBackDateByFrequency(schedule.getFrequency(), System.currentTimeMillis()))
                    .durationToDate(System.currentTimeMillis())
                    .status(ReportStatus.TO_BE_GENERATE)
                    .build();
        };
    }

    @Bean
    public ItemWriter<ReportManagement> reportScheduleItemWriter(ReportManagementRepository reportManagementRepository) {
        return items -> {
            reportManagementRepository.saveAll(items); // Save processed items in DB
            System.out.println("Saved processed items to DB: " + items);
        };
    }
}




@Bean
public ItemWriter<ReportManagement> reportScheduleItemWriter(ReportManagementRepository reportManagementRepository) {
    return items -> {
        reportManagementRepository.saveAll(items); // Saves list to DB
        System.out.println("Saved processed items to DB: " + items);
    };
}