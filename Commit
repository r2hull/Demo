package com.epay.merchant.service;

import com.epay.merchant.dao.CaptchaDao;
import com.epay.merchant.dto.CaptchaDto;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.mapper.CaptchaMapper;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.model.response.CaptchaResponse;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.MerchantUtil;
import com.epay.merchant.util.VoiceCaptchaUtil;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.validator.CaptchaValidator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sbi.epay.captcha.impl.DefaultKaptcha;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.activation.DataHandler;
import jakarta.activation.DataSource;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeBodyPart;
import jakarta.mail.internet.MimeMultipart;
import jakarta.mail.util.ByteArrayDataSource;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.MessageFormat;

/**
 * CaptchaService handles the generation, validation, and management of captchas.  
 * It provides methods for generating and regenerating captchas in both image and audio formats.  
 * The service integrates with the database and includes logging for tracking execution.
 */
@Service
@RequiredArgsConstructor
public class CaptchaService {

    private final CaptchaDao captchaDao;
    private final DefaultKaptcha captchaProducer;
    private final CaptchaValidator captchaValidator;
    private final CaptchaMapper captchaMapper;
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Generates a captcha, saves it in the database, and returns the response.  
     * It includes an image and audio format of the captcha.
     *
     * @param captchaRequest The request containing captcha details.
     * @return ResponseEntity containing captcha data.
     */
    public ResponseEntity<byte[]> generateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("Generating captcha for RequestId: {}", captchaRequest.getRequestId());
        captchaValidator.requestValidator(captchaRequest);
        byte[] captchaBytes = createCaptchaResponse(captchaRequest);
        logger.info("Captcha generated successfully for RequestId: {}", captchaRequest.getRequestId());
        return ResponseEntity.ok().headers(createHeaders(captchaBytes.length)).body(captchaBytes);
    }

    /**
     * Regenerates an existing captcha and returns the updated response.
     *
     * @param captchaRequest The request containing captcha details.
     * @return ResponseEntity with updated captcha data.
     */
    public ResponseEntity<byte[]> regenerateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("Regenerating captcha for RequestId: {}", captchaRequest.getRequestId());
        captchaValidator.regenerateValidator(captchaRequest);
        byte[] captchaBytes = createCaptchaResponse(captchaRequest);
        logger.info("Captcha regenerated successfully for RequestId: {}", captchaRequest.getRequestId());
        return ResponseEntity.ok().headers(createHeaders(captchaBytes.length)).body(captchaBytes);
    }

    /**
     * Generates a captcha image from text and encodes it in Base64 format.
     *
     * @param captchaText The text to be converted into an image.
     * @return A Base64 encoded captcha image.
     */
    public String generateCaptchaImage(String captchaText) {
        logger.info("Generating captcha image for text: {}", captchaText);
        BufferedImage image = captchaProducer.createImage(captchaText);
        String base64Image = MerchantUtil.convertImageToBase64(image, "Captcha");
        logger.info("Captcha image generated successfully.");
        return base64Image;
    }

    /**
     * Creates a captcha response, including an image and audio format.
     *
     * @param captchaRequest The request containing captcha details.
     * @return Captcha response as a byte array.
     */
    private byte[] createCaptchaResponse(CaptchaRequest captchaRequest) {
        logger.info("Creating captcha response for RequestId: {}", captchaRequest.getRequestId());
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            saveCaptcha(captchaRequest).writeTo(outputStream);
            logger.info("Captcha response created successfully for RequestId: {}", captchaRequest.getRequestId());
            return outputStream.toByteArray();
        } catch (IOException | MessagingException e) {
            logger.error("Error generating captcha for RequestId: {}", captchaRequest.getRequestId(), e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, captchaRequest.getRequestType() + "Key"));
        }
    }

    /**
     * Creates HTTP headers for the captcha response.
     *
     * @param contentLength The length of the captcha content.
     * @return HttpHeaders containing content details.
     */
    private HttpHeaders createHeaders(int contentLength) {
        logger.info("Creating HTTP headers for captcha response.");
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_MIXED);
        headers.setContentLength(contentLength);
        logger.info("Headers created successfully.");
        return headers;
    }

    /**
     * Saves the captcha details in the database and returns a MIME multipart response.
     *
     * @param captchaRequest The request containing captcha details.
     * @return MIME multipart response with captcha data.
     */
    private MimeMultipart saveCaptcha(CaptchaRequest captchaRequest) {
        logger.info("Saving captcha for RequestId: {}", captchaRequest.getRequestId());
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
        String captchaText = captchaProducer.createText();
        String base64Image = generateCaptchaImage(captchaText);
        DataSource audioDataSource = new ByteArrayDataSource(VoiceCaptchaUtil.speakToByteArray(captchaText), "audio/wav");

        CaptchaResponse captchaResponse = saveAndMapCaptchaResponse(captchaText, captchaRequest, requestType, base64Image);
        logger.info("Captcha saved successfully for RequestId: {}", captchaRequest.getRequestId());
        return createMultipartResponse(captchaResponse, audioDataSource);
    }

    /**
     * Saves captcha details in the database and maps them to a response.
     *
     * @param captchaText   The generated captcha text.
     * @param captchaRequest The request details.
     * @param requestType   The type of captcha request.
     * @param base64Image   The encoded captcha image.
     * @return CaptchaResponse containing the saved details.
     */
    private CaptchaResponse saveAndMapCaptchaResponse(String captchaText, CaptchaRequest captchaRequest, RequestType requestType, String base64Image) {
        logger.info("Mapping and saving captcha response for RequestId: {}", captchaRequest.getRequestId());
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, false);
        CaptchaResponse response = captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image);
        logger.info("Captcha response mapped and saved successfully.");
        return response;
    }

    /**
     * Creates a MIME multipart response containing captcha details.
     *
     * @param captchaResponse The response containing captcha data.
     * @param audioDataSource The audio captcha data source.
     * @return MIME multipart containing JSON and audio captcha.
     */
    private MimeMultipart createMultipartResponse(CaptchaResponse captchaResponse, DataSource audioDataSource) {
        logger.info("Creating multipart response for RequestId: {}", captchaResponse.getRequestId());
        MimeMultipart mimeMultipart = new MimeMultipart("mixed");

        try {
            MimeBodyPart jsonPart = new MimeBodyPart();
            jsonPart.setContent(new ObjectMapper().writeValueAsString(captchaResponse), "application/json; charset=UTF-8");
            mimeMultipart.addBodyPart(jsonPart);

            MimeBodyPart filePart = new MimeBodyPart();
            filePart.setDataHandler(new DataHandler(audioDataSource));
            filePart.setFileName("speech.wav");
            mimeMultipart.addBodyPart(filePart);
        } catch (MessagingException | JsonProcessingException e) {
            logger.error("Error creating multipart response for RequestId: {}", captchaResponse.getRequestId(), e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, captchaResponse.getRequestId()));
        }
        logger.info("Multipart response created successfully for RequestId: {}", captchaResponse.getRequestId());
        return mimeMultipart;
    }
}