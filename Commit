@@Component
public class CustomWriter implements ItemWriter<ReportManagement> {

    @Autowired
    private ReportManagementDao reportManagementDao;

    @Override
    public void write(Chunk<? extends ReportManagement> chunk) throws Exception {
        // Convert chunk into a List and save in DB
        List<? extends ReportManagement> reportList = chunk.getItems();
        reportManagementDao.saveAll(reportList); // saveAll() requires List, and chunk.getItems() is already a List.
    }
}



@Component
public class CustomWriter implements ItemWriter<ReportManagement> {

    @Autowired
    private ReportManagementDao reportManagementDao;

    @Override
    public void write(Chunk<? extends ReportManagement> chunk) {
        reportManagementDao.saveAll(chunk.getItems());
    }
}



@Configuration
@EnableBatchProcessing
public class BatchConfig {

    @Autowired
    private JobRepository jobRepository;

    @Autowired
    private PlatformTransactionManager transactionManager;

    @Autowired
    private CustomReader reader;

    @Autowired
    private CustomProcessor processor;

    @Autowired
    private CustomWriter writer;

    @Bean
    public Job processJob() {
        return new JobBuilder("reportJob", jobRepository)
                .start(processStep())
                .build();
    }

    @Bean
    public Step processStep() {
        return new StepBuilder("reportStep", jobRepository)
                .<ReportScheduleManagement, ReportManagement>chunk(3, transactionManager)
                .reader(reader)
                .processor(processor)
                .writer(writer)
                .build();
    }
}




@Component
public class ReportScheduler {

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job processJob;

    @Scheduled(cron = "${scheduled.cron.time}") // Define in application.properties
    public void executeReportBySchedule() throws Exception {
        JobParameters jobParameters = new JobParametersBuilder()
                .addLong("time", System.currentTimeMillis())
                .toJobParameters();

        jobLauncher.run(processJob, jobParameters);
    }
}


