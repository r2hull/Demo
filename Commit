import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.epay.reporting.dao.InvoiceDao;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.util.enums.ReportFormat;
import com.epay.reporting.util.file.model.FileModel;
import com.epay.reporting.validator.MIdValidator;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.collections4.CollectionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;

@ExtendWith(MockitoExtension.class)
class InvoiceServiceTest {

    @Mock
    private InvoiceDao invoiceDao;

    @Mock
    private FileGeneratorService fileGeneratorService;

    @Mock
    private MIdValidator mIdValidator;

    @Mock
    private HttpServletResponse response;

    @InjectMocks
    private InvoiceService invoiceService;

    private final String testMid = "12345";
    private final List<String> testReportMonths = List.of("2024-01");

    @BeforeEach
    void setUp() {
        reset(invoiceDao, fileGeneratorService, mIdValidator);
    }

    @Test
    void testGenerateMerchantGstInvoice_Success() {
        // Mock invoice data
        List<Map<String, Object>> mockData = new ArrayList<>();
        Map<String, Object> dataMap = new HashMap<>();
        dataMap.put("headers", List.of("Column1", "Column2"));
        dataMap.put("rows", List.of(List.of("Value1", "Value2")));
        Map<String, Object> csvData = new HashMap<>();
        csvData.put("map", dataMap);
        mockData.add(csvData);

        when(invoiceDao.getGstInvoiceData(testMid, testReportMonths)).thenReturn(mockData);

        // Execute method
        ReportingResponse<String> response = invoiceService.generateMerchantGstInvoice(testMid, testReportMonths, this.response);

        // Verify response
        assertEquals("Success", response.getData().getFirst());
        assertEquals("SUCCESS", response.getStatus());

        // Verify interactions
        verify(mIdValidator, times(1)).validatedActiveMId(testMid);
        verify(invoiceDao, times(1)).getGstInvoiceData(testMid, testReportMonths);
        verify(fileGeneratorService, times(1)).buildFileModel(any(), any(), any(), any());
    }
}