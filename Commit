public interface AggMerchantVolumeVelocityChacheRepository  extends CrudRepository<AggMerchantVolumeVelocityEntity, String> {

    @Query(value = "select MERCHANT_ID as merchantId,PAY_MODE_CODE as payModeCode,VOLVEL_CHECK_ALLOWED as volumeCheckAllowed,MIN_TXN_LIMIT as minTxnLimit, MAX_TXN_LIMIT as maxTxnLimit, DAILY_TXN_AMT_LIMIT as dailyTxnAmountLimit, WEEKLY_TXN_AMT_LIMIT as WeeklyTxnAmountLimit, MONTHLY_TXN_AMT_LIMIT as monthlyTxnAmountLimit, " +
            " QUARTERLY_TXN_AMT_LIMIT as quaterlyTxnAmountLimit, HALFYEARLY_TXN_NO_LIMIT as halfYearlyTxnAmountLimit, ANNUAL_TXN_AMT_LIMIT as annualTxnAmountLimit " +
            " from MERCHANT_VVL_VIEW where merchant_id=:mid",nativeQuery = true)
    List<Map<String, Object>> getMerchantVolumeDetails(@Param(value = "mid") String mid);


//gem fire
public interface MerchantPricingCacheRepository extends CrudRepository<MerchantPricingEntity, String> {

    @Query("SELECT t FROM /Admin_Pricing_View t WHERE t.mId = $1 AND t.payModeCode = $2 AND t.gtwMapsId = $3 AND t.payProcType = $4 " +
            "AND t.slabFrom <= $5 AND t.slabTo >= $5")
    List<MerchantPricingEntity> getPricing(@Param("mId") String mId, @Param("payModeCode") String payModeCode, @Param("gtwMapsId") String gtwMapsId, @Param("payProcType") String payProcType, @Param("txnAmount") BigDecimal txnAmount);
