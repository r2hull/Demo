package com.epay.reporting.dao;

import com.epay.reporting.config.ReportingConfig;
import com.epay.reporting.dto.ReportScheduleManagementDto;
import com.epay.reporting.entity.ReportManagement;
import com.epay.reporting.entity.ReportScheduleManagement;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.mapper.ReportScheduleManagementMapper;
import com.epay.reporting.model.request.ReportScheduleManagementSearchRequest;
import com.epay.reporting.model.request.ReportScheduleManagementUpdateRequest;
import com.epay.reporting.repository.ReportScheduleManagementRepository;
import com.epay.reporting.specification.ReportScheduleManagementSpecification;
import com.epay.reporting.util.DateTimeUtils;
import com.epay.reporting.util.enums.ReportScheduledStatus;
import com.epay.reporting.util.enums.ReportStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.*;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ReportScheduleManagementDaoTest {

    @InjectMocks
    private ReportScheduleManagementDao reportScheduleManagementDao;

    @Mock
    private ReportScheduleManagementRepository reportScheduleManagementRepository;

    @Mock
    private ReportScheduleManagementMapper mapper;

    @Mock
    private ReportMasterDao reportMasterDao;

    @Mock
    private ReportManagementDao reportManagementDao;

    @Mock
    private ReportingConfig reportingConfig;

    private UUID reportId;
    private ReportScheduleManagement reportScheduleManagement;
    private ReportScheduleManagementDto reportScheduleManagementDto;

    @BeforeEach
    void setUp() {
        reportId = UUID.randomUUID();
        reportScheduleManagement = new ReportScheduleManagement();
        reportScheduleManagement.setId(UUID.randomUUID());
        reportScheduleManagement.setReportId(reportId);
        reportScheduleManagement.setStatus(ReportScheduledStatus.TO_BE_START);

        reportScheduleManagementDto = ReportScheduleManagementDto.builder()
                .reportId(reportId)
                .status(ReportScheduledStatus.TO_BE_START)
                .build();
    }

    @Test
    void testSave() {
        when(reportMasterDao.getReportIdByName(any())).thenReturn(reportId);
        when(mapper.mapDtoToEntity(any())).thenReturn(reportScheduleManagement);

        reportScheduleManagementDao.save(reportScheduleManagementDto);

        verify(reportScheduleManagementRepository, times(1)).save(any());
    }

    @Test
    void testExecuteReportBySchedule() {
        long scheduleStartTime = 1000L;
        long scheduleEndTime = 2000L;

        when(DateTimeUtils.getCurrentTimeInMills()).thenReturn(scheduleStartTime);
        when(DateTimeUtils.addMinutes(anyInt())).thenReturn(scheduleEndTime);
        when(reportingConfig.getReportScheduleExecutionWindow()).thenReturn(15);
        when(reportScheduleManagementRepository.findByStatusAndNextScheduleExecutionTime(
                eq(ReportScheduledStatus.TO_BE_START), eq(scheduleStartTime), eq(scheduleEndTime)))
                .thenReturn(List.of(reportScheduleManagement));

        reportScheduleManagementDao.executeReportBySchedule();

        verify(reportScheduleManagementRepository, times(1)).saveAll(anyList());
        verify(reportManagementDao, times(1)).saveAll(anyList());
    }

    @Test
    void testSearchAndGetAll() {
        Pageable pageable = PageRequest.of(0, 10);
        UUID reportId = UUID.randomUUID();
        ReportScheduleManagementSearchRequest searchRequest = new ReportScheduleManagementSearchRequest();

        when(reportMasterDao.getReportIdByName(any())).thenReturn(reportId);
        when(reportScheduleManagementRepository.findAll(any(Specification.class), eq(pageable)))
                .thenReturn(new PageImpl<>(List.of(reportScheduleManagement)));

        Page<ReportScheduleManagementDto> result = reportScheduleManagementDao.searchAndGetAll(searchRequest, pageable);

        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
    }

    @Test
    void testUpdate() {
        UUID id = UUID.randomUUID();
        ReportScheduleManagementUpdateRequest updateRequest = new ReportScheduleManagementUpdateRequest();
        updateRequest.setFrequency("WEEKLY");

        when(reportScheduleManagementRepository.findById(id)).thenReturn(Optional.of(reportScheduleManagement));

        reportScheduleManagementDao.update(id, updateRequest);

        verify(reportScheduleManagementRepository, times(1)).save(reportScheduleManagement);
    }

    @Test
    void testUpdate_WhenNotFound_ThrowsException() {
        UUID id = UUID.randomUUID();
        ReportScheduleManagementUpdateRequest updateRequest = new ReportScheduleManagementUpdateRequest();

        when(reportScheduleManagementRepository.findById(id)).thenReturn(Optional.empty());

        assertThrows(ReportingException.class, () -> reportScheduleManagementDao.update(id, updateRequest));
    }

    @Test
    void testCancelScheduler() {
        UUID id = UUID.randomUUID();

        when(reportScheduleManagementRepository.findById(id)).thenReturn(Optional.of(reportScheduleManagement));

        reportScheduleManagementDao.cancelScheduler(id);

        assertTrue(reportScheduleManagement.isCancelled());
        assertNull(reportScheduleManagement.getNextScheduleExecutionTime());
        verify(reportScheduleManagementRepository, times(1)).save(reportScheduleManagement);
    }

    @Test
    void testCancelScheduler_WhenNotFound_ThrowsException() {
        UUID id = UUID.randomUUID();

        when(reportScheduleManagementRepository.findById(id)).thenReturn(Optional.empty());

        assertThrows(ReportingException.class, () -> reportScheduleManagementDao.cancelScheduler(id));
    }
}