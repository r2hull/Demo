@Repository
public interface MerchantPricingCacheRepository extends CrudRepository<MerchantPricingEntity, String> {

    @Query("SELECT t FROM /Admin_Pricing_View t WHERE t.pricingRequestDto.mId = :mId AND t.pricingRequestDto.payModeCode = :payModeCode AND t.pricingRequestDto.gtwMapsId = :gtwMapsId AND t.pricingRequestDto.payProcType = :payProcType " +
            "AND t.slabFrom <= :txnAmount AND t.slabTo >= :txnAmount")
    List<MerchantPricing> getPricing(@Param("mId") String mId, @Param("payModeCode") String payModeCode, @Param("gtwMapsId") String gtwMapsId, @Param("payProcType") String payProcType, @Param("txnAmount") BigDecimal txnAmount);

}
@Component
@AllArgsConstructor
public class MerchantPricingDao {

    private final MerchantPricingRepository merchantPricingRepository;

    public Optional<MerchantPricing> getMerchantPricingById(MerchantPricingRequestDto merchantPricingRequestDto){

        return merchantPricingRepository.findById(merchantPricingRequestDto);
    }

    public List<MerchantPricing> getMerchantPricing(MerchantPricingRequestDto req){

        return merchantPricingRepository.getPricing(req.getMId(), req.getPayModeCode(), req.getGtwMapsId(), req.getPayProcType(), req.getTransactionAmount());
    }
}

@Data
@Region(
    name = "Admin_Pricing_View"
)
public class MerchantPricingEntity implements Serializable {
    @Id
    private String merchGtwFeeId;
}
