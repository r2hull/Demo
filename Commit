package com.epay.merchant.service;

import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.EPayIdentityUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockedStatic;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class LogoutServiceTest {

    @Mock
    private TokenService tokenService;

    @InjectMocks
    private LogoutService logoutService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testMerchantUserLogout_Success() {
        // Mock static method EPayIdentityUtil.getUserPrincipal()
        String mockUserName = "testUser";
        try (MockedStatic<EPayIdentityUtil> mockedStatic = mockStatic(EPayIdentityUtil.class)) {
            // Mock EPayPrincipal behavior
            EPayIdentityUtil.EPayPrincipal mockPrincipal = mock(EPayIdentityUtil.EPayPrincipal.class);
            when(mockPrincipal.getAuthenticationId()).thenReturn(mockUserName);
            mockedStatic.when(EPayIdentityUtil::getUserPrincipal).thenReturn(mockPrincipal);

            // Mock tokenService behavior
            when(tokenService.invalidateUserToken(anyString())).thenReturn(1);

            // Call the method under test
            MerchantResponse<String> response = logoutService.merchantUserLogout();

            // Assertions
            assertNotNull(response);
            assertEquals(1, response.getStatus());
            assertTrue(response.getData().contains("LogOut Successfully"));

            // Verify interactions
            verify(tokenService, times(1)).invalidateUserToken(mockUserName);
        }
    }

    @Test
    void testMerchantUserLogout_Failure() {
        // Mock static method EPayIdentityUtil.getUserPrincipal()
        String mockUserName = "testUser";
        try (MockedStatic<EPayIdentityUtil> mockedStatic = mockStatic(EPayIdentityUtil.class)) {
            // Mock EPayPrincipal behavior
            EPayIdentityUtil.EPayPrincipal mockPrincipal = mock(EPayIdentityUtil.EPayPrincipal.class);
            when(mockPrincipal.getAuthenticationId()).thenReturn(mockUserName);
            mockedStatic.when(EPayIdentityUtil::getUserPrincipal).thenReturn(mockPrincipal);

            // Mock tokenService behavior
            when(tokenService.invalidateUserToken(anyString())).thenReturn(0);

            // Call the method under test
            MerchantResponse<String> response = logoutService.merchantUserLogout();

            // Assertions
            assertNotNull(response);
            assertEquals(0, response.getStatus());
            assertTrue(response.getData().contains("LogOut Successfully"));

            // Verify interactions
            verify(tokenService, times(1)).invalidateUserToken(mockUserName);
        }
    }
}