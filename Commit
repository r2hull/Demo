@Component
@RequiredArgsConstructor
public class ReportScheduleManagementScheduler {

    private final ReportScheduleManagementService reportScheduleManagementService;

    @Scheduled(cron = "${scheduled.cron.time}")
    @SchedulerLock(name = "Report_Scheduler", lockAtLeastFor = "PT30S", lockAtMostFor = "PT2M")
    public void scheduleReportGeneration() {
        reportScheduleManagementService.executeReportBySchedule();
    }
}



@Service
@RequiredArgsConstructor
public class ReportScheduleManagementService {

    private final JobLauncher jobLauncher;
    private final Job reportScheduleJob;  // Injecting the job here
    private final ReportScheduleManagementDao reportScheduleManagementDao;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    public void executeReportBySchedule() {
        try {
            // Prepare Job Parameters
            JobParameters jobParameters = new JobParametersBuilder()
                    .addLong("time", System.currentTimeMillis())
                    .toJobParameters();
            jobLauncher.run(reportScheduleJob, jobParameters);  // Launch the batch job
        } catch (Exception e) {
            log.error("Error executing report by schedule", e);
        }
    }
}




@Component
public class ReportItemProcessor implements ItemProcessor<ReportScheduleManagement, ReportManagement> {

    @Override
    public ReportManagement process(ReportScheduleManagement schedule) {
        return ReportManagement.builder()
                .reportId(schedule.getReportId())
                .status(ReportStatus.TO_BE_GENERATE)
                .durationFromDate(schedule.getLastScheduleExecutionTime())
                .build();
    }
}



