package com.epay.reporting.config;

import com.epay.reporting.entity.ReportScheduleManagement;
import com.epay.reporting.repository.ReportScheduleManagementRepository;
import com.epay.reporting.util.DateTimeUtils;
import com.epay.reporting.util.enums.ReportScheduledStatus;
import lombok.AllArgsConstructor;
import org.springframework.batch.item.ItemReader;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;


public class CustomReader implements ItemReader<List<ReportScheduleManagement>> {

    @Autowired
    private ReportingConfig reportingConfig;
    @Autowired
    private ReportScheduleManagementRepository reportScheduleManagementRepository;
    @Override
    public List<ReportScheduleManagement>  read() throws Exception {

        Long scheduleStartTime = DateTimeUtils.getCurrentTimeInMills();
        Long scheduleEndTime = DateTimeUtils.addMinutes(reportingConfig.getReportScheduleExecutionWindow());
        return reportScheduleManagementRepository.findByStatusAndNextScheduleExecutionTime(ReportScheduledStatus.TO_BE_START, scheduleStartTime, scheduleEndTime);

    }
}



package com.epay.reporting.config;

import com.epay.reporting.entity.ReportManagement;
import com.epay.reporting.entity.ReportScheduleManagement;
import com.epay.reporting.repository.ReportScheduleManagementRepository;
import com.epay.reporting.util.DateTimeUtils;
import com.epay.reporting.util.enums.ReportStatus;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

public class CustomProcessor implements ItemProcessor<List<ReportScheduleManagement>, List<ReportManagement>> {
    @Autowired
    private ReportingConfig reportingConfig;

    @Autowired
    private ReportScheduleManagementRepository reportScheduleManagementRepository;


    @Override
    public List<ReportManagement> process(List<ReportScheduleManagement> req) throws Exception {
        Long scheduleStartTime = DateTimeUtils.getCurrentTimeInMills();
        Long scheduleEndTime = DateTimeUtils.addMinutes(reportingConfig.getReportScheduleExecutionWindow());

        List<ReportManagement> reportManagementList = req.stream().map(schedule -> {
            schedule.setLastScheduleExecutionTime(DateTimeUtils.getCurrentTimeInMills());
            return ReportManagement.builder().reportId(schedule.getReportId()).mId(schedule.getMId()).format(schedule.getFormat()).scheduledId(schedule.getId()).durationFromDate(DateTimeUtils.calculateBackDateByFrequency(schedule.getFrequency(), scheduleEndTime)).durationToDate(scheduleStartTime).scheduledId(schedule.getId()).status(ReportStatus.TO_BE_GENERATE).build();
        }).toList();
        reportScheduleManagementRepository.saveAll(req);

        return reportManagementList;
    }

}



public class CustomWriter implements ItemWriter<List<ReportManagement>> {

    @Autowired
    private ReportManagementDao reportManagementDao;
    @Override
    public void write(Chunk<? extends  List<ReportManagement>> chunks) throws Exception {
        List<? extends List<ReportManagement>> items = chunks.getItems();
        List<ReportManagement> reportManagementChunkList = items.getFirst();
        reportManagementDao.saveAll(reportManagementChunkList);

    }
}




@Configuration
@EnableBatchProcessing
public class BatchConf {


    @Bean
    Job createJob(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        return new JobBuilder("job", jobRepository)
                .flow(createStep(jobRepository, transactionManager)).end().build();
    }

    @Bean
    Step createStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
        return new StepBuilder("step", jobRepository)
                .<List<ReportScheduleManagement>, List<ReportManagement>> chunk(3, transactionManager)
                .allowStartIfComplete(true)
                .reader(new CustomReader())
                .processor(new CustomProcessor())
                .writer(new CustomWriter())
                .build();
    }
}


    public void executeReportBySchedule() throws JobInstanceAlreadyCompleteException, JobExecutionAlreadyRunningException, JobParametersInvalidException, JobRestartException {

        JobParameters jobParameters = new JobParametersBuilder()
                .addLong("time", System.currentTimeMillis()).toJobParameters();

        jobLauncher.run(processJob, jobParameters);

    }
