private byte[] fileToByteArray(File file) {
    try {
        // Validate and normalize paths
        String tempDirConfig = merchantConfig.getTempDir();
        if (tempDirConfig == null || tempDirConfig.trim().isEmpty()) {
            logger.warn("Temporary directory is not configured. Skipping audio file read.");
            return new byte[0]; // Return empty byte array
        }

        Path tempDir = Paths.get(tempDirConfig).normalize().toAbsolutePath();
        Path resolvedPath = tempDir.resolve(file.getName()).normalize();

        // Ensure the file is within the secure directory
        if (!resolvedPath.startsWith(tempDir)) {
            logger.warn("Unauthorized file access detected: {}", resolvedPath);
            return new byte[0]; // Return empty byte array instead of throwing an error
        }

        // Read file safely using Files API
        try (InputStream fis = Files.newInputStream(resolvedPath);
             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, bytesRead);
            }

            logger.debug("File successfully converted to byte array: {}", file.getName());
            return byteArrayOutputStream.toByteArray();
        }

    } catch (IOException e) {
        logger.warn("Error reading file to byte array: {}. Proceeding without audio.", file.getName());
        return new byte[0]; // Return empty byte array instead of throwing an exception
    }
}



private byte[] validateAndReturnAudio(File tempFile, UUID requestId) {
    if (!tempFile.exists() || tempFile.length() == 0) {
        logger.warn("Generated audio file is empty or missing for requestId: {}. Proceeding without audio.", requestId);
        return new byte[0]; // Return empty byte array instead of throwing an exception
    }
    logger.info("Audio file successfully generated for requestId: {}", requestId);
    return fileToByteArray(tempFile);
}


public String encodeToBase64(byte[] data, UUID requestId) {
    return Optional.ofNullable(data)
            .filter(d -> d.length > 0)
            .map(Base64.getEncoder()::encodeToString)
            .orElseGet(() -> {
                logger.warn("Empty byte array for requestId: {}. Proceeding without audio.", requestId);
                return ""; // Return an empty string instead of throwing an error
            });
}

