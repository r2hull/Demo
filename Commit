import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

private final ExecutorService executorService = Executors.newFixedThreadPool(3);

private MerchantResponse<CaptchaResponse> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
    RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());

    // Step 1: Generate Captcha Text
    String captchaText = captchaProducer.createText();

    // Step 2: Execute image, audio, and DB save tasks in parallel
    CompletableFuture<String> imageFuture = CompletableFuture.supplyAsync(() -> generateCaptchaImage(captchaText), executorService);
    CompletableFuture<String> audioFuture = CompletableFuture.supplyAsync(() -> generateCaptchaAudio(captchaText, captchaRequest.getRequestId()), executorService);
    CompletableFuture<CaptchaDto> captchaSaveFuture = CompletableFuture.supplyAsync(() -> 
        captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry), executorService);

    // Step 3: Combine results
    return CompletableFuture.allOf(imageFuture, audioFuture, captchaSaveFuture)
            .thenApplyAsync(ignored -> {
                try {
                    String base64Image = imageFuture.get();
                    String base64Audio = audioFuture.get();
                    CaptchaDto captchaDto = captchaSaveFuture.get();
                    
                    logger.info("Captcha generation completed for RequestId: {}", captchaRequest.getRequestId());

                    return MerchantResponse.<CaptchaResponse>builder()
                            .data(List.of(captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image, base64Audio)))
                            .status(RESPONSE_SUCCESS)
                            .build();
                } catch (Exception e) {
                    logger.error("Error in parallel execution of captcha generation", e);
                    throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE, 
                        MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, captchaRequest.getRequestId()));
                }
            }).join();
}