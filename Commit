dependencies {
    implementation 'org.springframework.batch:spring-batch-core:5.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // For JPA
    runtimeOnly 'com.h2database:h2' // Optional: For testing with H2
}


import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.batch.core.JobParametersBuilder;

import java.util.Collections;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    private final JobRepository jobRepository;
    private final JobLauncher jobLauncher;
    private final StepBuilderFactory stepBuilderFactory;

    public BatchConfiguration(JobRepository jobRepository, JobLauncher jobLauncher, StepBuilderFactory stepBuilderFactory) {
        this.jobRepository = jobRepository;
        this.jobLauncher = jobLauncher;
        this.stepBuilderFactory = stepBuilderFactory;
    }

    @Bean
    public Job exampleJob() {
        return new JobBuilder("exampleJob", jobRepository)
                .incrementer(new RunIdIncrementer())
                .start(exampleStep())
                .build();
    }

    @Bean
    public Step exampleStep() {
        return new StepBuilder("exampleStep", stepBuilderFactory)
                .<String, String>chunk(10)
                .reader(exampleReader())
                .processor(exampleProcessor())
                .writer(exampleWriter())
                .build();
    }

    @Bean
    public ItemReader<String> exampleReader() {
        return new ItemReader<>() {
            private final String[] data = {"Item1", "Item2", "Item3"};
            private int index = 0;

            @Override
            public String read() {
                return index < data.length ? data[index++] : null;
            }
        };
    }

    @Bean
    public ItemProcessor<String, String> exampleProcessor() {
        return item -> "Processed " + item;
    }

    @Bean
    public ItemWriter<String> exampleWriter() {
        return items -> items.forEach(System.out::println);
    }
}