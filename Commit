@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CaptchaResponse {
    private UUID requestId;
    private String captchaImage;  // Base64-encoded image
    private String captchaAudio;  // Base64-encoded audio
    private Long expiryTime;
    private String requestType;
}


import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import javax.sound.sampled.*;
import java.io.*;

public class VoiceCaptchaUtil {

    private static final String VOICENAME = "kevin16";  // Select appropriate voice

    public static String generateAudioCaptcha(String text) {
        try {
            // Generate the audio file
            File audioFile = new File("captcha_audio.wav");
            speak(text, audioFile);

            // Convert audio to Base64
            return convertAudioToBase64(audioFile);
        } catch (Exception e) {
            throw new RuntimeException("Error generating voice captcha", e);
        }
    }

    private static void speak(String text, File file) throws Exception {
        VoiceManager voiceManager = VoiceManager.getInstance();
        Voice voice = voiceManager.getVoice(VOICENAME);
        
        if (voice == null) {
            throw new RuntimeException("Voice not found: " + VOICENAME);
        }
        
        voice.allocate();
        AudioFileFormat.Type fileType = AudioFileFormat.Type.WAVE;
        try (AudioInputStream ais = new AudioInputStream(new ByteArrayInputStream(text.getBytes()), 
                new AudioFormat(16000, 16, 1, true, false), text.length())) {
            AudioSystem.write(ais, fileType, file);
        }
        voice.deallocate();
    }

    private static String convertAudioToBase64(File file) throws IOException {
        byte[] fileContent = Files.readAllBytes(file.toPath());
        return Base64.getEncoder().encodeToString(fileContent);
    }
}


private MerchantResponse<CaptchaResponse> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
    RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
    
    // Step 2: Generate Captcha Text
    String captchaText = captchaProducer.createText();
    
    // Step 3: Generate Captcha Image and convert into Base64
    String base64Image = generateCaptchaImage(captchaText);
    
    // Step 4: Generate Captcha Audio and convert into Base64
    String base64Audio = VoiceCaptchaUtil.generateAudioCaptcha(captchaText);
    
    // Step 5: Save the Captcha into DB
    CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);
    
    // Step 6: Build the Merchant Response
    logger.info("Generated captcha for RequestId: {}", captchaRequest.getRequestId());
    
    CaptchaResponse captchaResponse = captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image);
    captchaResponse.setCaptchaAudio(base64Audio);  // Add audio captcha

    return MerchantResponse.<CaptchaResponse>builder()
            .data(List.of(captchaResponse))
            .status(RESPONSE_SUCCESS)
            .build();
}


