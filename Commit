package com.epay.reporting.dao;

import com.epay.reporting.dto.ReportManagementDto;
import com.epay.reporting.entity.ReportManagement;
import com.epay.reporting.etl.producer.ReportGenerationProducer;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.mapper.ReportManagementMapper;
import com.epay.reporting.model.request.ReportManagementRequest;
import com.epay.reporting.repository.ReportManagementRepository;
import com.epay.reporting.util.enums.Report;
import com.epay.reporting.util.enums.ReportFormat;
import com.epay.reporting.util.enums.ReportStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ReportManagementDaoTest {

    @InjectMocks
    private ReportManagementDao reportManagementDao;

    @Mock
    private ReportManagementRepository reportManagementRepository;
    
    @Mock
    private ReportManagementMapper mapper;
    
    @Mock
    private ReportMasterDao reportMasterDao;
    
    @Mock
    private ReportGenerationProducer reportGenerationProducer;

    private UUID reportId;
    private ReportManagement reportManagement;
    private ReportManagementDto reportManagementDto;
    private ReportManagementRequest reportManagementRequest;

    @BeforeEach
    void setUp() {
        reportId = UUID.randomUUID();
        reportManagement = ReportManagement.builder()
                .id(reportId)
                .reportId(reportId)
                .mId("mid")
                .status(ReportStatus.TO_BE_GENERATE)
                .build();

        reportManagementDto = ReportManagementDto.builder()
                .report(Report.REFUNDS)
                .reportId(reportId)
                .status(ReportStatus.TO_BE_GENERATE)
                .mId("mid")
                .build();

        reportManagementRequest = ReportManagementRequest.builder()
                .report(Report.REFUNDS)
                .mId("mid")
                .build();
    }

    @Test
    void testSaveReportManagement() {
        when(reportMasterDao.getReportIdByName(reportManagementDto.getReport())).thenReturn(reportId);
        when(mapper.mapDtoToEntity(reportManagementDto)).thenReturn(reportManagement);
        when(reportManagementRepository.save(reportManagement)).thenReturn(reportManagement);

        reportManagementDao.saveReportManagement(reportManagementDto);

        verify(reportManagementRepository, times(1)).save(reportManagement);
    }

    @Test
    void testSaveAll() {
        List<ReportManagement> reportManagementList = List.of(reportManagement, reportManagement);
        when(reportManagementRepository.saveAll(reportManagementList)).thenReturn(reportManagementList);
        when(reportMasterDao.getReportNameById(reportManagement.getReportId())).thenReturn(Report.REFUNDS);

        reportManagementDao.saveAll(reportManagementList);

        verify(reportManagementRepository, times(1)).saveAll(reportManagementList);
    }

    @Test
    void testSearchAndGetReportManagement() {
        Pageable pageable = Pageable.ofSize(10);
        UUID reportId = UUID.randomUUID();

        when(reportMasterDao.getReportIdByName(reportManagementRequest.getReport())).thenReturn(reportId);
        when(reportManagementRepository.findAll(any(), eq(pageable)))
                .thenReturn(new PageImpl<>(List.of(reportManagement)));
        when(mapper.mapEntityToDto(reportManagement)).thenReturn(reportManagementDto);

        Page<ReportManagementDto> result = reportManagementDao.searchAndGetReportManagement(reportManagementRequest, pageable);

        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        verify(reportManagementRepository).findAll(any(), eq(pageable));
    }

    @Test
    void testUpdateReportStatus() {
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportId), anyList()))
                .thenReturn(Optional.of(reportManagement));

        reportManagementDao.updateReportStatus(reportId, ReportStatus.GENERATED);

        assertEquals(ReportStatus.GENERATED, reportManagement.getStatus());
        verify(reportManagementRepository).save(reportManagement);
    }

    @Test
    void testUpdateReportStatus_ThrowsException_WhenReportNotFound() {
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportId), anyList()))
                .thenReturn(Optional.empty());

        ReportingException thrown = assertThrows(ReportingException.class, () -> 
            reportManagementDao.updateReportStatus(reportId, ReportStatus.GENERATED)
        );

        assertEquals("Report is not found.", thrown.getMessage());
    }

    @Test
    void testUpdateStatusAndRemarks() {
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportId), anyList()))
                .thenReturn(Optional.of(reportManagement));

        reportManagementDao.updateStatusAndRemarks(reportId, ReportStatus.GENERATED, "Updated Remarks");

        assertEquals(ReportStatus.GENERATED, reportManagement.getStatus());
        assertEquals("Updated Remarks", reportManagement.getRemarks());
        verify(reportManagementRepository).save(reportManagement);
    }

    @Test
    void testUpdateStatusAndFilePath() {
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportId), anyList()))
                .thenReturn(Optional.of(reportManagement));

        reportManagementDao.updateStatusAndFilePath(reportId, ReportStatus.GENERATED, "new/path/report.pdf");

        assertEquals(ReportStatus.GENERATED, reportManagement.getStatus());
        assertEquals("new/path/report.pdf", reportManagement.getFilePath());
        verify(reportManagementRepository).save(reportManagement);
    }

    @Test
    void testUpdateStatusAndFilePath_WhenReportNotFound_ShouldNotThrowException() {
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportId), anyList()))
                .thenReturn(Optional.empty());

        assertDoesNotThrow(() -> 
            reportManagementDao.updateStatusAndFilePath(reportId, ReportStatus.GENERATED, "new/path/report.pdf")
        );
    }

    @Test
    void testUpdateStatusAndRemarks_WhenReportNotFound_ShouldNotThrowException() {
        when(reportManagementRepository.findByIdAndStatusIn(eq(reportId), anyList()))
                .thenReturn(Optional.empty());

        assertDoesNotThrow(() -> 
            reportManagementDao.updateStatusAndRemarks(reportId, ReportStatus.GENERATED, "Updated Remarks")
        );
    }

    @Test
    void testIsReportExistsByMIdAndFilePathAndStatus() {
        when(reportManagementRepository.existsBymIdAndFilePathAndStatus("mid", "filePath", ReportStatus.GENERATION_STARTED))
                .thenReturn(true);

        boolean result = reportManagementDao.isReportExistsByMIdAndFilePathAndStatus("mid", "filePath", ReportStatus.GENERATION_STARTED);

        assertTrue(result);
    }

    @Test
    void testGetReportManagement() {
        when(reportManagementRepository.findBymIdAndFilePathAndStatus("mid", "filePath", ReportStatus.GENERATION_STARTED))
                .thenReturn(reportManagement);
        when(mapper.mapEntityToDto(reportManagement)).thenReturn(reportManagementDto);

        ReportManagementDto result = reportManagementDao.getReportManagement("mid", "filePath", ReportStatus.GENERATION_STARTED);

        assertEquals("mid", result.getMId());
    }
}