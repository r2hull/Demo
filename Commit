import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.epay.reporting.dao.InvoiceDao;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.util.enums.ReportFormat;
import com.epay.reporting.util.file.model.FileModel;
import com.epay.reporting.validator.MIdValidator;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.collections4.CollectionUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.*;

@ExtendWith(MockitoExtension.class)
class InvoiceServiceTest {

    @Mock
    private InvoiceDao invoiceDao;

    @Mock
    private FileGeneratorService fileGeneratorService;

    @Mock
    private MIdValidator mIdValidator;

    @Mock
    private HttpServletResponse response;

    @InjectMocks
    private InvoiceService invoiceService;

    private final String testMid = "12345";
    private final List<String> testReportMonths = List.of("2024-01");

    @BeforeEach
    void setUp() {
        // Reset mocks before each test
        reset(invoiceDao, fileGeneratorService, mIdValidator);
    }

    @Test
    void testGenerateMerchantGstInvoice_Success() {
        // Mock GST invoice data
        List<Map<String, Object>> mockData = new ArrayList<>();
        Map<String, Object> dataMap = new HashMap<>();
        dataMap.put("headers", List.of("Column1", "Column2"));
        dataMap.put("rows", List.of(List.of("Value1", "Value2")));
        Map<String, Object> csvData = new HashMap<>();
        csvData.put("map", dataMap);
        mockData.add(csvData);

        when(invoiceDao.getGstInvoiceData(testMid, testReportMonths)).thenReturn(mockData);

        // Mock FileModel
        FileModel fileModel = mock(FileModel.class);
        when(fileModel.getReportMonth()).thenReturn("2024-01");

        when(fileGeneratorService.buildFileModel(eq(ReportFormat.CSV), any(), any(), any())).thenReturn(fileModel);

        // Execute method
        ReportingResponse<String> response = invoiceService.generateMerchantGstInvoice(testMid, testReportMonths, this.response);

        // Verify response
        assertEquals("Success", response.getData().getFirst());
        assertEquals("SUCCESS", response.getStatus());

        verify(mIdValidator, times(1)).validatedActiveMId(testMid);
        verify(invoiceDao, times(1)).getGstInvoiceData(testMid, testReportMonths);
        verify(fileGeneratorService, times(1)).buildFileModel(any(), any(), any(), any());
    }

    @Test
    void testGenerateMerchantGstInvoice_NoDataFound() {
        // Mock no data scenario
        when(invoiceDao.getGstInvoiceData(testMid, testReportMonths)).thenReturn(Collections.emptyList());

        // Execute method
        ReportingResponse<String> response = invoiceService.generateMerchantGstInvoice(testMid, testReportMonths, this.response);

        // Verify response
        assertEquals("No Data Found", response.getData().getFirst());
        assertEquals("SUCCESS", response.getStatus());

        verify(mIdValidator, times(1)).validatedActiveMId(testMid);
        verify(invoiceDao, times(1)).getGstInvoiceData(testMid, testReportMonths);
        verifyNoInteractions(fileGeneratorService);
    }

    @Test
    void testGenerateMerchantGstInvoice_ExceptionHandling() {
        // Mock unexpected exception
        when(invoiceDao.getGstInvoiceData(testMid, testReportMonths)).thenThrow(new RuntimeException("Unexpected Error"));

        // Execute and verify exception
        ReportingException exception = assertThrows(ReportingException.class, 
            () -> invoiceService.generateMerchantGstInvoice(testMid, testReportMonths, this.response)
        );

        assertTrue(exception.getMessage().contains("Error generating GST invoice report."));

        verify(mIdValidator, times(1)).validatedActiveMId(testMid);
        verify(invoiceDao, times(1)).getGstInvoiceData(testMid, testReportMonths);
    }
}