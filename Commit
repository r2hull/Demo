import java.util.Base64;
import java.util.UUID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CaptchaService {

    private static final Logger logger = LoggerFactory.getLogger(CaptchaService.class);

    /**
     * Generates an audio CAPTCHA and returns it as a Base64-encoded string.
     *
     * @param captchaText The text to convert into an audio CAPTCHA.
     * @param requestId   Unique identifier for tracking the request.
     * @return Base64-encoded string of the audio CAPTCHA.
     */
    public String generateAudioCaptcha(String captchaText, UUID requestId) {
        logger.info("Started generateAudioCaptcha for requestId: {}", requestId);

        try {
            // Convert text to speech bytes
            byte[] audioBytes = VoiceCaptchaUtil.voiceToBytes(captchaText, requestId);

            // Convert to Base64
            return encodeToBase64(audioBytes, requestId);

        } catch (Exception e) {
            logger.error("Error generating audio CAPTCHA for requestId: {}", requestId, e);
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE,
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, requestId));
        }
    }

    /**
     * Encodes a byte array to a Base64 string.
     *
     * @param data      The byte array to encode.
     * @param requestId The request ID for logging.
     * @return The Base64-encoded string.
     */
    private String encodeToBase64(byte[] data, UUID requestId) {
        if (data == null || data.length == 0) {
            logger.warn("Empty byte array provided for requestId: {}", requestId);
            return "";
        }

        String base64String = Base64.getEncoder().encodeToString(data);
        logger.info("Successfully encoded audio to Base64 for requestId: {}", requestId);
        return base64String;
    }
}