import java.util.Base64;
import java.util.UUID;
import java.util.Optional;
import java.util.stream.Stream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CaptchaService {

    private static final Logger logger = LoggerFactory.getLogger(CaptchaService.class);

    /**
     * Generates an audio CAPTCHA and returns it as a Base64-encoded string.
     *
     * @param captchaText The text to convert into an audio CAPTCHA.
     * @param requestId   Unique identifier for tracking the request.
     * @return Base64-encoded string of the audio CAPTCHA.
     */
    public String generateAudioCaptcha(String captchaText, UUID requestId) {
        logger.info("Started generateAudioCaptcha for requestId: {}", requestId);

        return Optional.ofNullable(captchaText)
                .map(text -> VoiceCaptchaUtil.voiceToBytes(text, requestId))
                .map(data -> encodeToBase64(data, requestId))
                .orElseGet(() -> {
                    logger.warn("Captcha text is null for requestId: {}", requestId);
                    return "";
                });
    }

    /**
     * Encodes a byte array to a Base64 string using Java 8 Streams.
     *
     * @param data      The byte array to encode.
     * @param requestId The request ID for logging.
     * @return The Base64-encoded string.
     */
    private String encodeToBase64(byte[] data, UUID requestId) {
        return Optional.ofNullable(data)
                .filter(d -> d.length > 0)
                .map(Base64.getEncoder()::encodeToString)
                .orElseGet(() -> {
                    logger.warn("Empty byte array for requestId: {}", requestId);
                    return "";
                });
    }
}