import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.transaction.PlatformTransactionManager;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.support.builder.RepositoryItemReaderBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Sort;

import java.util.List;

@Configuration
@EnableBatchProcessing
public class BatchConfig {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;
    private final ReportScheduleManagementRepository reportScheduleManagementRepository;
    private final ReportManagementDao reportManagementDao;

    public BatchConfig(JobRepository jobRepository,
                       PlatformTransactionManager transactionManager,
                       ReportScheduleManagementRepository reportScheduleManagementRepository,
                       ReportManagementDao reportManagementDao) {
        this.jobRepository = jobRepository;
        this.transactionManager = transactionManager;
        this.reportScheduleManagementRepository = reportScheduleManagementRepository;
        this.reportManagementDao = reportManagementDao;
    }

    @Bean
    public Step reportStep() {
        return new StepBuilder("reportStep", jobRepository)
                .<ReportScheduleManagement, ReportManagement>chunk(100, transactionManager) // Process 100 records at a time
                .reader(reportReader())
                .processor(reportProcessor())
                .writer(reportWriter())
                .build();
    }

    @Bean
    public ItemReader<ReportScheduleManagement> reportReader() {
        Long scheduleStartTime = DateTimeUtils.getCurrentTimeInMills();
        Long scheduleEndTime = DateTimeUtils.addMinutes(30); // Example time window
        return new RepositoryItemReaderBuilder<ReportScheduleManagement>()
                .repository(reportScheduleManagementRepository)
                .methodName("findByStatusAndNextScheduleExecutionTime")
                .arguments(
                        ReportScheduledStatus.TO_BE_START,
                        scheduleStartTime,
                        scheduleEndTime
                )
                .sorts(Sort.by(Sort.Order.asc("nextScheduleExecutionTime")))
                .build();
    }

    @Bean
    public ItemProcessor<ReportScheduleManagement, ReportManagement> reportProcessor() {
        return schedule -> {
            schedule.setLastScheduleExecutionTime(DateTimeUtils.getCurrentTimeInMills());
            return ReportManagement.builder()
                    .reportId(schedule.getReportId())
                    .mId(schedule.getMId())
                    .format(schedule.getFormat())
                    .scheduledId(schedule.getId())
                    .durationFromDate(DateTimeUtils.calculateBackDateByFrequency(schedule.getFrequency(), DateTimeUtils.getCurrentTimeInMills()))
                    .durationToDate(DateTimeUtils.getCurrentTimeInMills())
                    .status(ReportStatus.TO_BE_GENERATE)
                    .build();
        };
    }

    @Bean
    public ItemWriter<ReportManagement> reportWriter() {
        return items -> {
            // Save the new ReportManagement objects
            reportManagementDao.saveAll(items);

            // Optionally update ReportScheduleManagement records
            items.forEach(item -> {
                reportScheduleManagementRepository.findById(item.getScheduledId())
                        .ifPresent(schedule -> reportScheduleManagementRepository.save(schedule));
            });
        };
    }

    @Bean
    public Job reportJob() {
        return new JobBuilder("reportJob", jobRepository)
                .start(reportStep())
                .build();
    }
}