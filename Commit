public List<Map<String, Object>> getMerchantVolumeDetails(String mid) {
    // Fetch data from DB
    List<Map<String, Object>> merchantVolumeDetailsData = aggMerchantVolumeVelocityRepository.getMerchantVolumeDetails(mid);

    // If data is empty, throw an exception
    Optional.ofNullable(merchantVolumeDetailsData)
            .filter(x -> !x.isEmpty())
            .orElseThrow(() -> new AdminException(ErrorConstants.VOLUME_ERROR_CODE, ErrorConstants.VOLUME_ERROR_MESSAGE));

    // Convert List<Map<String, Object>> to List<AggMerchantVolumeVelocityEntity>
    List<AggMerchantVolumeVelocityEntity> entityList = merchantVolumeDetailsData.stream().map(stringObjectMap -> {
        AggMerchantVolumeVelocityEntity entity = new AggMerchantVolumeVelocityEntity();

        entity.setMerchant_Vvl_Id((String) stringObjectMap.get("merchantId")); // Map merchantId to merchant_Vvl_Id
        entity.setPaymodeCode((String) stringObjectMap.get("payModeCode"));
        entity.setVolvelcheckAllowed(((String) stringObjectMap.get("volumeCheckAllowed")).charAt(0));
        entity.setMinTxnLimit((BigDecimal) stringObjectMap.get("minTxnLimit"));
        entity.setMax_txn_Limit((BigDecimal) stringObjectMap.get("maxTxnLimit"));
        entity.setDailyTxnAmtLimit((BigDecimal) stringObjectMap.get("dailyTxnAmountLimit"));
        entity.setWeeklyTxnAmtLimit((BigDecimal) stringObjectMap.get("WeeklyTxnAmountLimit"));
        entity.setMonthlyTxnamtLimit((BigDecimal) stringObjectMap.get("monthlyTxnAmountLimit"));
        entity.setQuarterlyTxnAamtLimit((BigDecimal) stringObjectMap.get("quaterlyTxnAmountLimit"));
        entity.setHalfyearlyTxnNoLimit((BigDecimal) stringObjectMap.get("halfYearlyTxnAmountLimit"));
        entity.setAnnualTxnAmtLimit((BigDecimal) stringObjectMap.get("annualTxnAmountLimit"));

        return entity;
    }).collect(Collectors.toList());

    // Save the list into the cache repository
    aggMerchantVolumeVelocityCacheRepository.saveAll(entityList);

    return merchantVolumeDetailsData;
}