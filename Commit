package com.epay.merchant.util;

import com.epay.merchant.exception.MerchantException;
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import com.sun.speech.freetts.audio.AudioPlayer;
import com.sun.speech.freetts.audio.SingleFileAudioPlayer;
import lombok.experimental.UtilityClass;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.UUID;

/**
 * Utility class for generating voice captcha audio files.
 */
@UtilityClass
public class VoiceCaptchaUtil {

    private static final Logger logger = LoggerFactory.getLogger(VoiceCaptchaUtil.class);
    private static final String VOICE_NAME = "kevin16";

    static {
        System.setProperty("freetts.voices", "com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");
    }

    /**
     * Converts the given text to speech and returns the audio as a byte array.
     *
     * @param text the text to convert to speech.
     * @return a byte array containing the speech audio.
     */
    public static byte[] speakToByteArray(String text) {
        File tempFile = null;
        try {
            // Generate a unique filename
            String uniqueFileName = "speech_" + System.currentTimeMillis() + "_" + UUID.randomUUID();
            tempFile = File.createTempFile(uniqueFileName, ".wav");
            tempFile.deleteOnExit();

            Voice voice = VoiceManager.getInstance().getVoice(VOICE_NAME);
            if (voice == null) {
                logger.error("Voice '{}' not found. Returning empty byte array.", VOICE_NAME);
                return new byte[0];
            }

            voice.allocate();

            AudioPlayer audioPlayer = new SingleFileAudioPlayer(tempFile.getAbsolutePath().replace(".wav", ""),
                    javax.sound.sampled.AudioFileFormat.Type.WAVE);
            voice.setAudioPlayer(audioPlayer);

            logger.info("Converting text to speech...");
            voice.speak(text);
            voice.deallocate();
            audioPlayer.close();

            return fileToByteArray(tempFile);

        } catch (Exception e) {
            logger.error("Error occurred while generating speech audio", e);
            return new byte[0];

        } finally {
            if (tempFile != null && tempFile.exists() && tempFile.delete()) {
                logger.info("Temporary file deleted: {}", tempFile.getAbsolutePath());
            }
        }
    }

    /**
     * Reads a file and converts it to a byte array.
     *
     * @param file the file to convert.
     * @return a byte array representing the fileâ€™s contents.
     */
    private static byte[] fileToByteArray(File file) {
        try (AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(file);
             ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {

            byte[] buffer = new byte[1024];
            int bytesRead;

            while ((bytesRead = audioInputStream.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, bytesRead);
            }

            return byteArrayOutputStream.toByteArray();

        } catch (IOException | UnsupportedAudioFileException e) {
            logger.error("Error reading file to byte array", e);
            return new byte[0];
        }
    }
}