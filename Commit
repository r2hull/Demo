package com.epay.merchant.util;

import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.SourceDataLine;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class TalkResource {

    private static final String VOICENAME = "kevin16";  // Use "kevin16" for better quality

    public byte[] generateAudio(String text) {
        VoiceManager voiceManager = VoiceManager.getInstance();
        Voice voice = voiceManager.getVoice(VOICENAME);

        if (voice == null) {
            System.err.println("Voice not found.");
            return new byte[0];
        }

        voice.allocate();

        // **Adjust speech properties**
        voice.setRate(100);      // Slower speech
        voice.setPitch(80);      // Adjust pitch
        voice.setVolume(1.0f);   // Adjust volume

        // **Capture the generated speech as an audio stream**
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            voice.speak(text);
            byte[] audioBytes = outputStream.toByteArray();
            voice.deallocate();
            return audioBytes;
        } catch (IOException e) {
            e.printStackTrace();
            return new byte[0];
        }
    }
}



import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.core.io.ByteArrayResource;

private final TalkResource talkResource = new TalkResource();

public ResponseEntity<?> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
    RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());

    // **Step 1: Generate Captcha Text**
    String captchaText = captchaProducer.createText();

    // **Step 2: Generate Captcha Image and convert into Base 64**
    String base64Image = generateCaptchaImage(captchaText);

    // **Step 3: Generate CAPTCHA Audio as byte array**
    byte[] audioBytes = talkResource.generateAudio(captchaText);

    // **Step 4: Save the CAPTCHA into DB**
    CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);

    // **Step 5: Create Multipart Response**
    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.MULTIPART_FORM_DATA);

    ByteArrayResource audioResource = new ByteArrayResource(audioBytes);

    return ResponseEntity.ok()
            .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"captcha_audio.wav\"")
            .contentType(MediaType.APPLICATION_OCTET_STREAM)
            .body(audioResource);
}



@PostMapping(value = "/generate-captcha", produces = MediaType.MULTIPART_FORM_DATA_VALUE)
@Operation(summary = "Create Captcha API.", description = "Create Captcha API with text, image, and audio.")
public ResponseEntity<?> generateCaptcha(@RequestBody CaptchaRequest captchaRequest) {
    logger.info("Received request to generate captcha with requestId: {}", captchaRequest.getRequestId());
    return captchaService.generateCaptcha(captchaRequest);
}