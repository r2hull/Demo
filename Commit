import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.data.RepositoryItemReader;
import org.springframework.batch.item.support.builder.RepositoryItemReaderBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Sort;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.Collections;
import java.util.List;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;
    private final ReportScheduleManagementRepository repository;

    public BatchConfiguration(JobRepository jobRepository,
                               PlatformTransactionManager transactionManager,
                               ReportScheduleManagementRepository repository) {
        this.jobRepository = jobRepository;
        this.transactionManager = transactionManager;
        this.repository = repository;
    }

    @Bean
    public Job reportScheduleJob() {
        return Job.builder()
                .name("reportScheduleJob")
                .repository(jobRepository)
                .start(reportScheduleStep())
                .build();
    }

    @Bean
    public Step reportScheduleStep() {
        return Step.builder()
                .name("reportScheduleStep")
                .repository(jobRepository)
                .transactionManager(transactionManager)
                .<ReportScheduleManagement, ReportManagement>chunk(10)
                .reader(reportScheduleReader())
                .processor(reportScheduleProcessor())
                .writer(reportScheduleWriter())
                .build();
    }

    @Bean
    public ItemReader<ReportScheduleManagement> reportScheduleReader() {
        return new RepositoryItemReaderBuilder<ReportScheduleManagement>()
                .repository(repository)
                .methodName("findByStatusAndNextScheduleExecutionTime")
                .arguments(
                        ReportScheduledStatus.TO_BE_START,
                        System.currentTimeMillis(),
                        System.currentTimeMillis() + 3600000 // Example: 1-hour window
                )
                .sorts(Collections.singletonMap("nextScheduleExecutionTime", Sort.Direction.ASC))
                .build();
    }

    @Bean
    public ItemProcessor<ReportScheduleManagement, ReportManagement> reportScheduleProcessor() {
        return schedule -> ReportManagement.builder()
                .reportId(schedule.getReportId())
                .mId(schedule.getMId())
                .format(schedule.getFormat())
                .scheduledId(schedule.getId())
                .durationFromDate(DateTimeUtils.calculateBackDateByFrequency(schedule.getFrequency(), System.currentTimeMillis()))
                .durationToDate(System.currentTimeMillis())
                .status(ReportStatus.TO_BE_GENERATE)
                .build();
    }

    @Bean
    public ItemWriter<ReportManagement> reportScheduleWriter() {
        return items -> {
            // Save processed data to the database (e.g., using DAO)
            System.out.println("Processed Reports: " + items.size());
        };
    }
}