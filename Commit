package com.epay.merchant.service;

import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.EPayIdentityUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class MerchantUserServiceTest {

    @Mock
    private MerchantUserDao merchantUserDao;

    @Mock
    private MerchantMapper merchantMapper;

    @Mock
    private MerchantUserValidator merchantUserValidator;

    @InjectMocks
    private MerchantUserService merchantUserService;

    private MerchantUserDto merchantUserDto;
    private MerchantUserRequest merchantUserRequest;
    private MerchantUserResponse merchantUserResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        merchantUserDto = MerchantUserDto.builder().userName("rahul").role("role").build();
        merchantUserRequest = MerchantUserRequest.builder().userName("rahul").build();
        merchantUserResponse = new MerchantUserResponse();
        merchantUserResponse.setUserName(merchantUserDto.getUserName());
        merchantUserResponse.setRole("role");
    }

    @Test
    void testCreateMerchantUser() {
        setupCommonMocks(false);

        MerchantResponse<MerchantUserResponse> response = merchantUserService.createMerchantUser(merchantUserRequest);

        assertCommonAssertions(response);
        verify(merchantUserValidator).validateMerchantUserRequest(merchantUserRequest, true);
        verify(merchantUserDao).saveMerchantUser(merchantUserDto, StringUtils.EMPTY);
    }

    @Test
    void testUpdateMerchantUser() {
        setupCommonMocks(false);

        MerchantResponse<MerchantUserResponse> response = merchantUserService.updateMerchantUser(merchantUserRequest);

        assertCommonAssertions(response);
        verify(merchantUserValidator).validateMerchantUserRequest(merchantUserRequest, true);
        verify(merchantUserDao).updateMerchantUser(merchantUserDto, false);
    }

    @Test
    void testUpdateMerchantUserProfile() {
        setupCommonMocks(true);

        MerchantResponse<MerchantUserResponse> response = merchantUserService.updateMerchantUserProfile(merchantUserRequest);

        assertCommonAssertions(response);
        verify(merchantUserValidator).validateMerchantUserProfile(merchantUserRequest);
        verify(merchantUserDao).updateMerchantUser(merchantUserDto, true);
    }

    private void setupCommonMocks(boolean isProfileUpdate) {
        if (isProfileUpdate) {
            doNothing().when(merchantUserValidator).validateMerchantUserProfile(merchantUserRequest);
        } else {
            doNothing().when(merchantUserValidator).validateMerchantUserRequest(merchantUserRequest, true);
        }
        when(merchantMapper.mapMerchantUserRequestToMerchantUserDto(merchantUserRequest)).thenReturn(merchantUserDto);
        when(merchantMapper.mapMerchantUserDtoToResponse(merchantUserDto)).thenReturn(merchantUserResponse);
        when(merchantUserDao.getUserRoleName(merchantUserDto.getRole())).thenReturn("role");
    }

    private void assertCommonAssertions(MerchantResponse<MerchantUserResponse> response) {
        assertNotNull(response);
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals("rahul", response.getData().getUserName());
        assertEquals("role", response.getData().getRole());
    }

    @Test
    void testGetMerchantUserAccess_Success() {
        UUID uuid = UUID.randomUUID();
        List<UserMenuPermissionEntityDetails> permissions = List.of(UserMenuPermissionEntityDetails.builder().userId(uuid).build());
        mockSecurityContext("rahul");

        when(merchantUserDao.getByUserName("rahul", UserStatus.ACTIVE)).thenReturn(merchantUserDto);
        when(merchantUserDao.getUserMenuPermission(merchantUserDto.getId())).thenReturn(permissions);

        MerchantResponse<MerchantUserAccessResponse> response = merchantUserService.getMerchantUserAccess();

        assertNotNull(response);
        assertEquals("rahul", response.getData().getUserInfo().getUserName());
    }

    @Test
    void testGetMerchantUserAccess_NotFound() {
        mockSecurityContext("rahul");

        when(merchantUserDao.getByUserName("rahul", UserStatus.ACTIVE)).thenReturn(null);

        MerchantException exception = assertThrows(MerchantException.class, () -> merchantUserService.getMerchantUserAccess());
        assertEquals(ErrorConstants.NOT_FOUND_ERROR_CODE, exception.getErrorCode());
    }

    private void mockSecurityContext(String username) {
        SecurityContextHolder.getContext().setAuthentication(mock(Authentication.class));
        EPayPrincipal principal = new EPayPrincipal();
        principal.setAuthenticationId(username);
        when(SecurityContextHolder.getContext().getAuthentication().getPrincipal()).thenReturn(principal);
    }
}