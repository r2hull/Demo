@RestController
@RequestMapping("/captcha")
@RequiredArgsConstructor
public class CaptchaController {

    private final CaptchaService captchaService;
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    @PostMapping
    @Operation(summary = "Create Captcha API.", description = "Generates a captcha based on the given request type.")
    public ResponseEntity<byte[]> generateCaptcha(@RequestBody CaptchaRequest captchaRequest) {
        logger.info("Received request to generate captcha with requestId: {}", captchaRequest.getRequestId());

        return captchaService.generateCaptchaResponse(captchaRequest);
    }
}






@Service
@RequiredArgsConstructor
public class CaptchaService {

    private final CaptchaDao captchaDao;
    private final DefaultKaptcha captchaProducer;
    private final CaptchaValidator captchaValidator;
    private final CaptchaMapper captchaMapper;
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    public ResponseEntity<byte[]> generateCaptchaResponse(CaptchaRequest captchaRequest) {
        logger.info("Generating captcha for RequestId: {}", captchaRequest.getRequestId());

        captchaValidator.requestValidator(captchaRequest);
        MimeMultipart mimeMultipart = processCaptcha(captchaRequest, false);
        byte[] responseBytes = convertMimeMultipartToByteArray(mimeMultipart);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_MIXED);
        headers.setContentLength(responseBytes.length);

        return ResponseEntity.ok().headers(headers).body(responseBytes);
    }

    private MimeMultipart processCaptcha(CaptchaRequest captchaRequest, boolean retry) {
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
        String captchaText = captchaProducer.createText();
        String base64Image = generateCaptchaImage(captchaText);
        byte[] audioBytes = generateAudioCaptcha(captchaText);
        
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);
        CaptchaResponse captchaResponse = captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image);
        
        return buildMimeMultipartResponse(captchaResponse, audioBytes);
    }

    private String generateCaptchaImage(String captchaText) {
        logger.info("Generated captcha text: {}", captchaText);
        BufferedImage image = captchaProducer.createImage(captchaText);
        return MerchantUtil.convertImageToBase64(image, "Captcha");
    }

    private byte[] generateAudioCaptcha(String captchaText) {
        return VoiceCaptchaUtil.speakToByteArray(captchaText);
    }

    private MimeMultipart buildMimeMultipartResponse(CaptchaResponse captchaResponse, byte[] audioBytes) {
        try {
            MimeMultipart mimeMultipart = new MimeMultipart("mixed");

            // JSON Response Part
            MimeBodyPart jsonPart = new MimeBodyPart();
            jsonPart.setContent(new ObjectMapper().writeValueAsString(captchaResponse), "application/json; charset=UTF-8");
            mimeMultipart.addBodyPart(jsonPart);

            // Audio File Part
            MimeBodyPart filePart = new MimeBodyPart();
            filePart.setDataHandler(new DataHandler(new ByteArrayDataSource(audioBytes, "audio/wav")));
            filePart.setFileName("captcha_audio.wav");
            mimeMultipart.addBodyPart(filePart);

            return mimeMultipart;
        } catch (MessagingException | JsonProcessingException e) {
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE, 
                    MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, "CaptchaKey"));
        }
    }

    private byte[] convertMimeMultipartToByteArray(MimeMultipart mimeMultipart) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            mimeMultipart.writeTo(outputStream);
            return outputStream.toByteArray();
        } catch (IOException | MessagingException e) {
            throw new RuntimeException("Error processing captcha response", e);
        }
    }
}