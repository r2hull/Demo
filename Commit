  @PostMapping("/regenerate")
    @Operation(summary = "Regenerate Captcha API.", description = "Create Captcha creation API for given Request Type")
    public MerchantResponse<CaptchaResponse> regenerateCaptcha(@RequestBody CaptchaRequest captchaRequest) {
        logger.info("Received request to generate captcha with requestId: {}", captchaRequest.getRequestId());
        return captchaService.regenerateCaptcha(captchaRequest);
    }

package com.epay.merchant.service;

import com.epay.merchant.dao.CaptchaDao;
import com.epay.merchant.dto.CaptchaDto;
import com.epay.merchant.mapper.CaptchaMapper;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.model.response.CaptchaResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantUtil;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.validator.CaptchaValidator;
import com.sbi.epay.captcha.impl.DefaultKaptcha;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.awt.image.BufferedImage;
import java.util.List;

import static com.epay.merchant.util.MerchantConstant.RESPONSE_SUCCESS;

/**
 * Class Name: CaptchaService
 * *
 * Description:
 * *
 * Author: Subhra Goswami
 * <p>
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 * *
 * Version:1.0
 */
@Service
@RequiredArgsConstructor
public class CaptchaService {

    private final CaptchaDao captchaDao;
    private final DefaultKaptcha captchaProducer;
    private final CaptchaValidator captchaValidator;
    private final CaptchaMapper captchaMapper;

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Generates a captcha and save it to the DB and returns a response.
     *
     * @param captchaRequest CaptchaRequest
     * @return merchantResponse containing CaptchaResponse
     */
    public MerchantResponse<CaptchaResponse> generateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        //Step 1 : Validate Captcha Request
        captchaValidator.requestValidator(captchaRequest);
        return saveCaptcha(captchaRequest, false);
    }


    /**
     * ReGenerates a captcha and save it to the DB and returns a response.
     *
     * @param captchaRequest CaptchaRequest
     * @return merchantResponse containing CaptchaResponse
     */
    public MerchantResponse<CaptchaResponse> regenerateCaptcha(CaptchaRequest captchaRequest) {
        logger.info("generate captcha for RequestId: {}", captchaRequest.getRequestId());
        //Step 1 : Validate Captcha Request
        captchaValidator.regenerateValidator(captchaRequest);
        return saveCaptcha(captchaRequest, true);
    }

    /**
     * Generates the captcha image and encodes it in Base64
     *
     * @param captchaText String
     * @return Captcha
     */
    private String generateCaptchaImage(String captchaText) {
        logger.info("generated captcha text: {}", captchaText);
        BufferedImage image = captchaProducer.createImage(captchaText);
        return MerchantUtil.convertImageToBase64(image, "Captcha");
    }

    private MerchantResponse<CaptchaResponse> saveCaptcha(CaptchaRequest captchaRequest, boolean retry) {
        RequestType requestType = RequestType.getRequestType(captchaRequest.getRequestType());
        //Step 2 : Generate Captcha Text
        String captchaText = captchaProducer.createText();
        //Step 3 : Generate Captcha Image and convert into Base 64
        String base64Image = generateCaptchaImage(captchaText);
        //Step 3 : Save the Captcha into DB
        CaptchaDto captchaDto = captchaDao.save(captchaText, captchaRequest.getRequestId(), requestType, retry);
        //Step 4 : Build the Merchant Response
        logger.info("generate captcha completed for RequestId: {}", captchaRequest.getRequestId());
        return MerchantResponse.<CaptchaResponse>builder().data(List.of(captchaMapper.mapCaptchaDtoToCaptchaResponse(captchaDto, base64Image))).status(RESPONSE_SUCCESS).build();
    }
}


public class MerchantUtil {

    private static final int OTP_LENGTH = 6;
    private static final long MIN = 100_000_000_000L;
    private static final long MAX = 999_999_999_999L;

    public static String convertImageToBase64(BufferedImage image, String imageType) {
        try {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            ImageIO.write(image, JPG, outputStream);
            return Base64.getEncoder().encodeToString(outputStream.toByteArray());
        } catch (IOException e) {
            throw new MerchantException(ErrorConstants.GENERATION_ERROR_CODE, MessageFormat.format(ErrorConstants.GENERATION_ERROR_MESSAGE, imageType));
        }
    }
}


    @Transactional
    public CaptchaDto save(String captchaText, UUID requestId, RequestType requestType, boolean retry) {
        if (retry) {
            CaptchaManagement captcha = getActiveCaptchaByRequestId(requestId);
            captcha.setExpiryTime(System.currentTimeMillis());
            captchaManagementRepository.save(captcha);
        }
        CaptchaManagement captcha = captchaManagementRepository.save(CaptchaManagement.builder().id(String.valueOf(Generators.timeBasedGenerator().generate())).verified(false).captchaText(EncryptionDecryptionUtil.hashValue(captchaText)).expiryTime(DateTimeUtils.addMinutes(merchantConfig.getExpiryTime())).requestId(requestId.toString()).requestType(requestType).createdAt(DateTimeUtils.getCurrentTimeInMills()).build());
        return captchaMapper.mapCaptchaEntityToCaptchaDto(captcha);
    }

public CaptchaManagement getActiveCaptchaByRequestId(UUID requestId) {
        return captchaManagementRepository.findActiveCaptcha(requestId.toString(), System.currentTimeMillis()).orElseThrow(() -> new MerchantException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Captcha.", "Captcha Expired, Invalid Request")));
    }

@NoArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CaptchaResponse {

    private UUID requestId;
    private String captchaImage;
    private Long expiryTime;
    private String requestType;

}
