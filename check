private void checkAndUpdateBulkRefundBooking(String bulkId) {
        BulkRefundBooking bulkRefundBooking = refundDao.findByBulkId(bulkId, null);
        if (bulkRefundBooking == null) {
            logger.error("BulkRefundBooking not found for bulkId: {}", bulkId);
            return;
        }

        int totalRecords = bulkRefundBooking.getTotalRecords();
        int passCount = refundDao.countByBulkIdAndRefundStatus(bulkId, RefundStatus.CANCELLATION_BOOKED.name());
        int failCount = refundDao.countByBulkIdAndRefundStatus(bulkId, RefundStatus.REFUND_FAILED.name());
        int processedCount = passCount + failCount;

        if (processedCount == totalRecords) {
            bulkRefundBooking.setValidRecords(passCount);
            bulkRefundBooking.setInvalidRecords(failCount);
            bulkRefundBooking.setRemark(failCount > 0 ? PARTIAL_PROCESS_MESSAGE : SUCCESS_PROCESS_MESSAGE);
            bulkRefundBooking.setBulkRefundStatus(BulkRefundStatus.PROCESSED.name());

            refundDao.saveBulkRefundBooking(bulkRefundBooking);
            logger.info("All rows processed, updated BulkRefundBooking: {} for bulkId: {}", bulkRefundBooking, bulkId);
        } else {
            logger.info("Not all rows processed yet for bulkId: {}. Total: {}, Processed: {} (Pass: {}, Fail: {})", 
                        bulkId, totalRecords, processedCount, passCount, failCount);
        }
    }

    // Rest of your methods remain unchanged...
}


    @Query("SELECT COUNT(d) FROM BulkRefundBookingDetails d WHERE d.bulkId = :bulkId AND d.refundStatus = :status")
    int countByBulkIdAndRefundStatus(@Param("bulkId") String bulkId, @Param("status") String status);
