    @Transactional
    public void syncTransactionData(String schedulerName) {
        log.info("Fetching data from DataSyncScheduler Table");
        DataSyncSchedulerDto dataSyncSchedulerDto = dataSyncSchedulerDao.findBySchedulerName(schedulerName);
        long lastRun = dataSyncSchedulerDto.getSchedulerLastRun();
        long currRun = DateTimeUtils.getCurrentTime();
        log.info("Syncing Transaction Data between {} and {}", lastRun, currRun);
        dataSyncSchedulerDao.saveTransactionDataSync(lastRun, currRun);
        log.info("Transaction Data Syncing Completed");
        dataSyncSchedulerDto.setSchedulerLastRun(currRun);
        dataSyncSchedulerDao.save(dataSyncSchedulerDto);
        log.info("Update {} data for DataSyncScheduler ", schedulerName);
    }
private final NamedParameterJdbcTemplate jdbcTemplate;

    public void saveTransactionDataSync(long lastRun, long currRun) {
        try {
            MapSqlParameterSource param = new MapSqlParameterSource();
            param.addValue("LAST_RUN", lastRun);
            param.addValue("CURR_RUN", currRun);
            int insertCount = jdbcTemplate.update(JdbcQuery.INSERT_MERCHANT_TXN, param);
            log.info("Inserted {} records into MERCHANT_TXN", insertCount);
        } catch (Exception ex) {
            log.error("Error during Transaction Data Sync for MERCHANT_TXN : {}", ex);
            throw ex;
        }
    }

    public static final String INSERT_MERCHANT_TXN = """
                INSERT INTO MERCHANT_TXN (ATRN_NUM, MERCHANT_ID, TXN_AMOUNT, MULTI_ACCOUNT)
                 SELECT ATRN_NUM, MERCHANT_ID, TXN_AMOUNT, MULTI_ACCOUNT
                  FROM MERCHANT_TXN_VIEW
                   WHERE CREATED_DATE > :LAST_RUN AND CREATED_DATE <= :CURR_RUN
            """;
