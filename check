public MerchantResponse<MerchantUserResponse> getAllMerchantUsers(String mId, Pageable pageable) {
    log.info("Fetching all MerchantUser records for merchant ID: {}", mId);
    List<MerchantUser> fullList = merchantUserRepository.findAllByMid(mId);

    // Remove duplicates if needed
    Set<String> uniqueIds = new HashSet<>();
    List<MerchantUser> distinctList = fullList.stream()
        .filter(user -> uniqueIds.add(user.getId()))
        .collect(Collectors.toList());

    // Pagination manually
    int start = (int) pageable.getOffset();
    int end = Math.min(start + pageable.getPageSize(), distinctList.size());
    List<MerchantUser> pagedList = distinctList.subList(start, end);

    log.info("Mapping users for response");
    List<MerchantUserResponse> responseList = merchantMapper.mapMerchantUserListToResponseList(pagedList);

    return MerchantResponse.<MerchantUserResponse>builder()
            .status(RESPONSE_SUCCESS)
            .data(responseList)
            .count((long) responseList.size())
            .total((long) distinctList.size())
            .build();
}