public TransactionResponse<TransactionTokenResponse> generateTransactionToken(String businessUrl, String orderHash, DeviceDetailsRequest deviceDetailsRequest, String clientIp) {
    logger.info("Starting transaction token generation for orderHash: {}", orderHash);
    tokenValidator.validateOrderHash(orderHash);

    // Step 1: Save device details if provided
    if (ObjectUtils.isNotEmpty(deviceDetailsRequest)) {
        logger.debug("Saving device details for orderHash: {}, clientIp: {}", orderHash, clientIp);
        deviceDetailsRequest.setClientIp(clientIp);
        tokenDao.saveTransactionRequestedDeviceInfo(buildTransactionDeviceInfoDto(orderHash, deviceDetailsRequest));
    }

    // Step 2: Check for existing token
    TransactionResponse<TransactionTokenResponse> existingTokenResponse = handleExistingToken(orderHash);
    if (existingTokenResponse != null) {
        return existingTokenResponse;
    }

    // Step 3: Fetch merchant order
    logger.debug("Fetching merchant order for orderHash: {}", orderHash);
    OrderDto orderDto = tokenDao.getMerchantOrderByOrderHash(orderHash);

    // Step 4: Fetch merchant details
    logger.debug("Fetching merchant details for MID: {}", orderDto.getMId());
    MerchantInfoResponse merchantDto = tokenDao.getMerchantByMId(orderDto.getMId());

    // Step 5: Validate business URL
    logger.debug("Validating business URL: {} for MID: {}", businessUrl, merchantDto.getMId());
    tokenValidator.validateBusinessUrl(businessUrl, merchantDto.getMerchantBusinessUrl());

    // Step 6: Generate new token
    logger.info("Generating new token for orderHash: {}", orderHash);
    TransactionTokenResponse transactionTokenResponse = generatingTransactionToken(orderDto, merchantDto.getTransactionTokenExpiryTime());

    return TransactionResponse.<TransactionTokenResponse>builder()
            .data(List.of(transactionTokenResponse))
            .status(TransactionConstant.RESPONSE_SUCCESS)
            .build();
}

/**
 * Checks for an existing token for the given orderHash and returns a response if active, throws an exception if inactive.
 *
 * @param orderHash The order hash to check for an existing token.
 * @return TransactionResponse with the existing token if active, or null if no valid token exists.
 * @throws TransactionException if the token is inactive.
 */
private TransactionResponse<TransactionTokenResponse> handleExistingToken(String orderHash) {
    logger.debug("Checking for existing token for orderHash: {}", orderHash);
    Optional<Token> existingToken = tokenDao.findLatestTokenByOrderHash(orderHash);
    if (existingToken.isPresent()) {
        Token token = existingToken.get();
        if (TokenStatus.INACTIVE.equals(token.getStatus())) {
            logger.debug("Inactive token found for orderHash: {}", orderHash);
            throw new TransactionException(ATTEMPT_EXPIRED_ERROR_CODE, ATTEMPT_EXPIRED_ERROR_MESSAGE);
        }
        if (TokenStatus.ACTIVE.equals(token.getStatus())) {
            logger.info("Reusing active token for orderHash: {}", orderHash);
            TransactionTokenResponse response = TransactionTokenResponse.builder()
                    .token(token.getGeneratedToken())
                    .hval(token.getAesKey())
                    .build();
            return TransactionResponse.<TransactionTokenResponse>builder()
                    .data(List.of(response))
                    .status(TransactionConstant.RESPONSE_SUCCESS)
                    .build();
        }
    }
    return null;
}




