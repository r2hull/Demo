package com.epay.merchant.validator;

import com.epay.merchant.dao.AdminDao;
import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.model.request.MerchantEntityGroupRequest;
import com.epay.merchant.model.request.UserEntityMappingRequest;
import com.epay.merchant.util.enums.MerchantUserRoles;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AdminValidatorTest {

    @Mock
    private AdminDao adminDao;

    @InjectMocks
    private AdminValidator adminValidator;

    private MerchantEntityGroupRequest merchantEntityGroupRequest;
    private UserEntityMappingRequest userEntityMappingRequest;

    @BeforeEach
    void setUp() {
        merchantEntityGroupRequest = new MerchantEntityGroupRequest();
        merchantEntityGroupRequest.setEntityId("E123");
        merchantEntityGroupRequest.setMIds(List.of("MID123"));

        userEntityMappingRequest = new UserEntityMappingRequest();
        userEntityMappingRequest.setUserName("testUser");
        userEntityMappingRequest.setEntityId("E123");
    }

    @Test
    void shouldValidateUserEntityRequest_WhenUserExists() {
        when(adminDao.isMerchantUserExistWithRoles(eq("testUser"), anyList()))
                .thenReturn(true);

        adminValidator.userEntityRequestValidator(userEntityMappingRequest);
        
        verify(adminDao, times(1)).isMerchantUserExistWithRoles(eq("testUser"), anyList());
    }

    @Test
    void shouldThrowError_WhenUserDoesNotExist() {
        when(adminDao.isMerchantUserExistWithRoles(eq("testUser"), anyList()))
                .thenReturn(false);

        Exception exception = assertThrows(RuntimeException.class, 
            () -> adminValidator.userEntityRequestValidator(userEntityMappingRequest));

        assertEquals("INVALID_ERROR_CODE", ((ErrorDto) exception).getErrorCode());
    }

    @Test
    void shouldValidateMIds_WhenValid() {
        when(adminDao.findInvalidsMIds(anyList())).thenReturn(List.of());

        adminValidator.entityValidator(merchantEntityGroupRequest);

        verify(adminDao, times(1)).findInvalidsMIds(anyList());
    }

    @Test
    void shouldThrowError_WhenMIdsAreInvalid() {
        when(adminDao.findInvalidsMIds(anyList())).thenReturn(List.of("MID999"));

        Exception exception = assertThrows(RuntimeException.class,
            () -> adminValidator.entityValidator(merchantEntityGroupRequest));

        assertEquals("INVALID_ERROR_CODE", ((ErrorDto) exception).getErrorCode());
    }
}