private BigDecimal verifyAccountAndGetTotalAmount(MerchantOrderDto merchantOrderDto, List<MultiAccountDto> multiAccountDetails) {
    logger.info("verifyAccountAndGetTotalAmount starts for mId: {}", merchantOrderDto.getMId());

    // Fetch merchant accounts from DB (handle null safely)
    Map<String, List<String>> merchantAccountsMap = adminDao.getMerchantMultiAccount(merchantOrderDto.getMId());
    List<String> merchantMultiAccountDetails = merchantAccountsMap != null 
            ? merchantAccountsMap.getOrDefault(merchantOrderDto.getMId(), Collections.emptyList()) 
            : Collections.emptyList();

    BigDecimal totalMultiAccountAmount = BigDecimal.ZERO;
    List<String> invalidAccounts = new ArrayList<>();

    // Loop through input accounts and verify against DB
    for (MultiAccountDto multiAccountDto : multiAccountDetails) {
        String accountIdentifier = multiAccountDto.getAccountIdentifier();
        
        if (merchantMultiAccountDetails.contains(accountIdentifier)) {
            totalMultiAccountAmount = totalMultiAccountAmount.add(multiAccountDto.getAmount());
        } else {
            invalidAccounts.add(accountIdentifier);
        }
    }

    // If any invalid accounts were found, throw error
    if (!invalidAccounts.isEmpty()) {
        logger.error("Invalid multi accounts for mId {}: {}", merchantOrderDto.getMId(), invalidAccounts);
        addError(INVALID_ERROR_CODE, 
            MessageFormat.format(INVALID_ERROR_MESSAGE, 
                TransactionErrorConstants.MULTI_ACCOUNT, 
                String.join(", ", invalidAccounts)));
        throwIfErrors();
    }

    logger.info("Total valid multi account amount for mId {}: {}", merchantOrderDto.getMId(), totalMultiAccountAmount);
    logger.info("verifyAccountAndGetTotalAmount end");

    return totalMultiAccountAmount;
}