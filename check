private void checkAndUpdateBulkRefundBooking(String bulkId) {
        BulkRefundBooking bulkRefundBooking = refundDao.findByBulkId(bulkId, null);
        if (bulkRefundBooking == null) {
            logger.error("BulkRefundBooking not found for bulkId: {}", bulkId);
            return;
        }

        int totalRecords = bulkRefundBooking.getTotalRecords();

        // Get counts grouped by refundStatus
        Map<String, Integer> statusCounts = refundDao.countByBulkIdGroupedByRefundStatus(bulkId);

        int validRecords = statusCounts.getOrDefault(RefundStatus.CANCELLATION_BOOKED.name(), 0);
        int invalidRecords = statusCounts.getOrDefault(RefundStatus.REFUND_FAILED.name(), 0);
        int processedRecords = validRecords + invalidRecords; // Only count final states

        // Update only when all rows are processed
        if (processedRecords == totalRecords) {
            bulkRefundBooking.setValidRecords(validRecords);
            bulkRefundBooking.setInvalidRecords(invalidRecords);
            bulkRefundBooking.setRemark(invalidRecords > 0 ? PARTIAL_PROCESS_MESSAGE : SUCCESS_PROCESS_MESSAGE);
            bulkRefundBooking.setBulkRefundStatus(BulkRefundStatus.PROCESSED.name());

            refundDao.saveBulkRefundBooking(bulkRefundBooking);
            logger.info("All rows processed, updated BulkRefundBooking: {} for bulkId: {}", bulkRefundBooking, bulkId);
        } else {
            logger.info("Not all rows processed yet for bulkId: {}. Total: {}, Processed: {} (Valid: {}, Invalid: {})", 
                        bulkId, totalRecords, processedRecords, validRecords, invalidRecords);
        }
    }