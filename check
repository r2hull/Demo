package com.epay.rns.utils;

import com.jcraft.jsch.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

public class SftpClientUtil {
    private String host;
    private String username;
    private String password;
    private int port;
    private Session session;
    private ChannelSftp channelSftp;

    public SftpClientUtil(String host, String username, String password, int port) {
        this.host = host;
        this.username = username;
        this.password = password;
        this.port = port;
    }

    public void connect() throws JSchException {
        JSch jsch = new JSch();
        session = jsch.getSession(username, host, port);
        session.setPassword(password);
        session.setConfig("StrictHostKeyChecking", "no");
        System.out.println("Connecting to " + host + ":" + port + " with user " + username);
        session.connect();
        channelSftp = (ChannelSftp) session.openChannel("sftp");
        channelSftp.connect();
    }

    public void disconnect() {
        if (channelSftp != null && channelSftp.isConnected()) {
            channelSftp.exit();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
    }

    public void downloadFile(String remoteFilePath, String localFilePath) throws JSchException, SftpException {
        channelSftp.get(remoteFilePath, localFilePath);
    }

    public void moveFile(String sourcePath, String destinationPath) throws SftpException {
        try {
            channelSftp.rename(sourcePath, destinationPath);
        } catch (SftpException e) {
            throw new SftpException(e.id, "Failed to move file from " + sourcePath + " to " + destinationPath + ": " + e.getMessage());
        }
    }

    // New method to create an acknowledgment file
    public void createAcknowledgmentFile(String fileName, boolean success) throws SftpException {
        String status = success ? "processed" : "failed";
        String ackPath = "/acknowledgment/" + fileName + "." + status;
        try {
            // Create an empty file by uploading a temporary empty file
            Path tempFile = Files.createTempFile("ack-", ".tmp");
            channelSftp.put(tempFile.toString(), ackPath);
            Files.delete(tempFile); // Clean up temporary file
            System.out.println("Created acknowledgment file: " + ackPath);
        } catch (IOException | SftpException e) {
            throw new SftpException(ChannelSftp.SSH_FX_FAILURE, "Failed to create acknowledgment file " + ackPath + ": " + e.getMessage());
        }
    }

    public List<FileInfo> findFilesModifiedWithinLastHour(List<String> remoteSubfolders) throws SftpException {
        List<FileInfo> recentFiles = new ArrayList<>();
        long currentTime = System.currentTimeMillis();
        long oneHourAgo = currentTime - 3600_000;

        for (String subfolder : remoteSubfolders) {
            try {
                Vector<ChannelSftp.LsEntry> files = channelSftp.ls(subfolder);
                for (ChannelSftp.LsEntry entry : files) {
                    if (!entry.getAttrs().isDir() && !entry.getFilename().equals(".") && !entry.getFilename().equals("..")) {
                        long mTime = entry.getAttrs().getMTime() * 1000L;
                        if (mTime >= oneHourAgo) {
                            FileInfo fileInfo = new FileInfo();
                            fileInfo.setFolder(subfolder);
                            fileInfo.setFileName(entry.getFilename());
                            fileInfo.setRemotePath(subfolder + "/" + entry.getFilename());
                            fileInfo.setModificationTime(mTime);
                            recentFiles.add(fileInfo);
                        }
                    }
                }
            } catch (SftpException e) {
                System.err.println("Error listing files in " + subfolder + ": " + e.getMessage());
            }
        }

        return recentFiles;
    }

    public static class FileInfo {
        private String folder;
        private String fileName;
        private String remotePath;
        private long modificationTime;

        public String getFolder() {
            return folder;
        }

        public void setFolder(String folder) {
            this.folder = folder;
        }

        public String getFileName() {
            return fileName;
        }

        public void setFileName(String fileName) {
            this.fileName = fileName;
        }

        public String getRemotePath() {
            return remotePath;
        }

        public void setRemotePath(String remotePath) {
            this.remotePath = remotePath;
        }

        public long getModificationTime() {
            return modificationTime;
        }

        public void setModificationTime(long modificationTime) {
            this.modificationTime = modificationTime;
        }
    }
}







package com.epay.rns.utils;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

class SftpClientMain {
    private static final String HOST = "localhost";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "root";
    private static final int PORT = 2222;
    private static final String LOCAL_DOWNLOAD_DIR = "C:\\Downloads";
    private static final String PROCESSED_DIR = "/processed";
    private static final String ACKNOWLEDGMENT_DIR = "/acknowledgment";

    public static void main(String[] args) {
        SftpClientUtil sftpClient = new SftpClientUtil(HOST, USERNAME, PASSWORD, PORT);

        try {
            // Ensure local download directory exists
            Path downloadDir = Paths.get(LOCAL_DOWNLOAD_DIR);
            if (!Files.exists(downloadDir)) {
                Files.createDirectories(downloadDir);
            }

            // Connect to the SFTP server
            sftpClient.connect();
            System.out.println("Connected to SFTP server");

            // List subfolders to check for recent files
            List<String> subfolders = Arrays.asList("/RnS/SBI", "/RnS/HDFC", "/RnS/BOB");

            // Find files modified within the last 1 hour
            List<SftpClientUtil.FileInfo> recentFiles = sftpClient.findFilesModifiedWithinLastHour(subfolders);
            if (recentFiles.isEmpty()) {
                System.out.println("No files found modified within the last 1 hour.");
                return;
            }

            System.out.println("Files modified within the last 1 hour:");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            int processedCount = 0;

            for (SftpClientUtil.FileInfo fileInfo : recentFiles) {
                System.out.println("  Folder: " + fileInfo.getFolder());
                System.out.println("  File: " + fileInfo.getFileName());
                System.out.println("  Path: " + fileInfo.getRemotePath());
                System.out.println("  Modified: " + sdf.format(new Date(fileInfo.getModificationTime())));

                boolean success = false;
                try {
                    // Download the file
                    Path downloadedFile = downloadDir.resolve(fileInfo.getFileName());
                    String downloadedFilePath = downloadedFile.toString();
                    sftpClient.downloadFile(fileInfo.getRemotePath(), downloadedFilePath);
                    System.out.println("  Downloaded to: " + downloadedFilePath);

                    // Verify content (optional)
                    String downloadedContent = Files.readString(downloadedFile);
                    System.out.println("  Content: " + downloadedContent);

                    // Move the file to /processed
                    String processedPath = PROCESSED_DIR + "/" + fileInfo.getFileName();
                    sftpClient.moveFile(fileInfo.getRemotePath(), processedPath);
                    System.out.println("  Moved to: " + processedPath);

                    success = true;
                    processedCount++;
                } catch (SftpException | IOException e) {
                    System.err.println("  Error processing file: " + e.getMessage());
                }

                // Create acknowledgment file
                try {
                    sftpClient.createAcknowledgmentFile(fileInfo.getFileName(), success);
                } catch (SftpException e) {
                    System.err.println("  Error creating acknowledgment file: " + e.getMessage());
                }
                System.out.println();
            }

            System.out.println("Total files processed: " + processedCount + "/" + recentFiles.size());

        } catch (JSchException | SftpException e) {
            System.err.println("Error occurred: " + e.getMessage());
            e.printStackTrace();
        } finally {
            sftpClient.disconnect();
            System.out.println("Disconnected from SFTP server");
        }
    }
}








