
@EqualsAndHashCode(callSuper = true)
@Getter
@Setter
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "MERCHANT_ORDERS")
public class Order extends AuditEntity {

    @Id
    @Column(nullable = false, updatable = false, unique = true)
    private String sbiOrderRefNumber;
    @Column(name = "MERCHANT_ID")
    private String mId;
    private String customerId;
    private String currencyCode;
    private BigDecimal orderAmount;
    private String orderRefNumber;

    @Enumerated(EnumType.STRING)
    private OrderStatus status;

    @Column(columnDefinition = "CLOB")
    private String otherDetails;
    private Long expiry;

    @Column(columnDefinition = "CLOB")
    private String multiAccounts;
    private String paymentMode;
    private String orderHash;
    private String returnUrl;
    private Integer orderRetryCount;

    @Column(columnDefinition = "CLOB")
    private String thirdPartyDetails;

    @OneToMany(mappedBy = "sbiOrderRefNumber", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<MerchantOrderPayment> merchantOrderPayments;

    /**
     * custom generator, do not remove it
     */
    @PrePersist
    protected void createSbiOrderRefNumber() {
        this.sbiOrderRefNumber = UUID.randomUUID().toString().toUpperCase().replace("-", "").substring(0, 20);
    }

}




@Data
@EqualsAndHashCode(callSuper = true)
@Entity
@Table(name = "MERCHANT_ORDER_PAYMENTS")
public class MerchantOrderPayment extends AuditEntity {

    @Id
    @Column(name = "ATRN_NUM", nullable = false, updatable = false, unique = true)
    private String atrnNumber;
    @Column(name = "MERCHANT_ID")
    private String mId;
    private String orderRefNumber;
    private String sbiOrderRefNumber;
    private String bankReferenceNumber;
    private String oldBankReferenceNumber;

    private String currencyCode;
    private BigDecimal orderAmount;
    @Column(name = "DEBIT_AMT")
    private BigDecimal debitAmount;
    private BigDecimal availableRefundAmount;
    private BigDecimal chargebackAmount;

    private String gstIn;
    private String channelBank;
    @Enumerated(EnumType.STRING)
    private PayMode payMode;
    @Column(name = "GTW_MAP_ID")
    private String pgBankCode;//this is gateway map id
    private String payProcId; //this is pay proc id e.g. Visa, Master, Rupay
    @Column(name = "PAY_PROC_TYPE")
    private String paymodeType; //this is Pay proc type e.g. onus, offus
    @Column(name = "GTW_ISSUE_MECODE")
    private String gatewayIssueMECode; //merchant wise and/or payment wise ME code received from bank
    private String cin;

    @Enumerated(EnumType.STRING)
    private PaymentStatus paymentStatus;
    @Enumerated(EnumType.STRING)
    private TransactionStatus transactionStatus;
    @Enumerated(EnumType.STRING)
    private SettlementStatus settlementStatus;
    @Enumerated(EnumType.STRING)
    private TransactionRefundStatus refundStatus;
    @Enumerated(EnumType.STRING)
    private CancellationStatus cancellationStatus;
    private String chargebackStatus;

    @Lob
    private String pushResponse;
    private Date paymentSuccessDate;
    private String failReason;
    private String pushStatus;

    private UUID rfId;
    private Long settlementTime;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sbiOrderRefNumber", insertable = false, updatable = false)
    private Order order;

    /**
     * Generate ATRN number dynamically for transaction.
     */
    @PrePersist
    protected void generatedATRN() {
        this.atrnNumber = TransactionUtil.createAtrnNumber(mId, payMode);
    }

}
