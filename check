public static String getParsingError(Throwable cause) {  
    if (cause instanceof UnrecognizedPropertyException e) {  
        return "Unrecognized field: '" + e.getPropertyName() + "'.";  
    } else if (cause instanceof JsonParseException e && e.getMessage().startsWith("Duplicate field")) {  
        return e.getMessage().split("\n")[0] + ".";  
    } else if (cause instanceof JsonMappingException e) {  
        return e.getPath().stream()
                .map(JsonMappingException.Reference::getFieldName)
                .reduce((first, second) -> second)
                .map(field -> validateField(e, field))
                .orElse("Invalid input.");
    }  
    return "Invalid input.";  
}

private static String validateField(JsonMappingException e, String field) {
    String message = e.getOriginalMessage();
    if (message.contains("null") || message.contains("empty String")) {
        return field + " is required";
    }
    try {
        Field declaredField = e.getReferringClass().getDeclaredField(field);
        declaredField.setAccessible(true);
        Object value = declaredField.get(e.getProcessor());

        if (value instanceof String s && !s.equals(s.trim())) {
            return field + " contains leading or trailing space";
        }
    } catch (Exception ignored) {}
    return "Invalid input.";
}