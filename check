 @ExceptionHandler(value = {MerchantException.class, EncryptionDecryptionException.class})
    public ResponseEntity<Object> handleEPayServiceException(RuntimeException ex) {
        logger.error("Handling MerchantException or EncryptionDecryptionException: {}", ex.getMessage(), ex);
        List<ErrorDto> errorDtoList = new ArrayList<>(List.of());
        ErrorDto errorDto;
        switch (ex) {
            case MerchantException me -> {
                if (me.getErrorMessages() != null) {
                    errorDtoList.addAll(me.getErrorMessages());
                } else {
                    errorDto = ErrorDto.builder().errorCode(me.getErrorCode()).errorMessage(me.getErrorMessage()).build();
                    errorDtoList.add(errorDto);
                }
            }
            case EncryptionDecryptionException me ->
                    errorDtoList.add(ErrorDto.builder().errorCode(me.getErrorCode()).errorMessage(me.getErrorMessage()).build());

            default ->
                    errorDtoList.add(ErrorDto.builder().errorCode(GENERIC_ERROR_CODE).errorMessage(ex.getLocalizedMessage()).build());

        }
        return generateResponseWithErrors(errorDtoList);
    }
