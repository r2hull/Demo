@Component
public class PurgeScheduler {

    @Autowired
    private XyzRepository xyzRepository;

    @Scheduled(cron = "0 0 2 * * ?") // Every day at 2 AM
    public void purgeOldData() {
        LocalDateTime oneWeekAgo = LocalDateTime.now().minusWeeks(1);
        xyzRepository.deleteOlderThan(oneWeekAgo);
    }
}


@Repository
public interface XyzRepository extends JpaRepository<XyzEntity, Long> {

    @Modifying
    @Transactional
    @Query("DELETE FROM XyzEntity x WHERE x.createdAt <= :cutoffDate")
    void deleteOlderThan(@Param("cutoffDate") LocalDateTime cutoffDate);
}


@Component
public class PurgeScheduler {

    @Autowired
    private XyzRepository xyzRepository;

    // Every 30 seconds
    @Scheduled(fixedRate = 30000)
    public void purgeOldData() {
        long cutoffTimestamp = System.currentTimeMillis() - (24 * 60 * 60 * 1000); // 1 day in millis
        xyzRepository.deleteOlderThan(cutoffTimestamp);
        System.out.println("Purging done at: " + LocalDateTime.now());
    }
}