@ExceptionHandler(HttpMessageNotReadableException.class)
public ResponseEntity<Object> handleEnumConversionException(HttpMessageNotReadableException e) {
    logger.error("Error in handleEnumConversionException with message: {}", e.getMessage(), e);

    String errorMessage = MessageFormat.format(JSON_ERROR_MESSAGE, REQUEST_BODY);
    Throwable rootCause = e.getCause();

    if (rootCause instanceof InvalidFormatException invalidFormatException) {
        String fieldName = "Unknown Field";

        if (!invalidFormatException.getPath().isEmpty()) {
            fieldName = invalidFormatException.getPath().get(0).getFieldName();
        }

        Class<?> targetType = null;

        // Handle both Jackson versions: getTargetType() OR getTargetType.getRawClass()
        try {
            JavaType javaType = invalidFormatException.getTargetType();
            if (javaType != null && javaType.isEnumType()) {
                targetType = javaType.getRawClass();
            }
        } catch (Exception ignored) {
            // fallback
            if (invalidFormatException.getTargetType() instanceof Class<?> clazz && clazz.isEnum()) {
                targetType = clazz;
            }
        }

        if (targetType != null && targetType.isEnum()) {
            String validValues = Arrays.toString(targetType.getEnumConstants());
            errorMessage = MessageFormat.format(
                    "Invalid value for field '{0}'. Valid values are: {1}",
                    fieldName,
                    validValues
            );
        }
    }

    ErrorDto errorDto = ErrorDto.builder()
            .errorCode(JSON_ERROR_CODE)
            .errorMessage(errorMessage)
            .build();

    return generateResponseWithErrors(List.of(errorDto));
}