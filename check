private void validateMonthsBetweenDate(TransactionSummaryRequest transactionSummaryRequest) {
        YearMonth fromYM = YearMonth.parse(transactionSummaryRequest.getFromDate(), FORMATTER_MMM_YYYY);
        YearMonth toYM = YearMonth.parse(transactionSummaryRequest.getToDate(), FORMATTER_MMM_YYYY);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy", Locale.ENGLISH);
        String startDate = fromYM.atDay(1).format(formatter);               // 01-May-2025
        String endDate = toYM.atEndOfMonth().format(formatter);             // 31-May-2025 or 30-Jun-2025

        LocalDate fromDate = fromYM.atDay(1);
        LocalDate oneYearAgo = LocalDate.now().minusYears(ONE);
        if (fromDate.isBefore(oneYearAgo)) {
            addError(FROM_DATE, INVALID_ERROR_CODE, MessageFormat.format(FROM_DATE_YEAR_DIFF_ERROR,ONE));
            throwIfErrors();
        }
        if (toYM.isBefore(fromYM)) {
            addError(TO_DATE, INVALID_ERROR_CODE, MessageFormat.format(INVALID_ERROR_MESSAGE, TO_DATE,"must be greater than or equal to from date"));
            throwIfErrors();
        }


        // Check if difference is more than 3 months
        long monthsBetween = ChronoUnit.MONTHS.between(fromYM, toYM);
        if (monthsBetween > MONTH_DEFF_LENGTH) {
            addError("Date", INVALID_ERROR_CODE, MONTH_DIFF_ERROR);
        }
        transactionSummaryRequest.setFromDate(startDate);
        transactionSummaryRequest.setToDate(endDate);
    }
