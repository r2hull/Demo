package com.epay.merchant.service;

import com.epay.merchant.dao.AlertDao;
import com.epay.merchant.dto.AlertManagementDto;
import com.epay.merchant.dto.AlertMasterDto;
import com.epay.merchant.dto.ReportAlertDto;
import com.epay.merchant.model.response.AlertManagementResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.MerchantUtil;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.epay.merchant.util.MerchantConstant.ACCOUNT_EXPIRY;

@Service
@RequiredArgsConstructor
public class AlertService {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final AlertDao alertDao;

    private static AlertManagementDto buildAlertManagementDto(String value, AlertMasterDto alertMasterDto) {
        return AlertManagementDto.builder().alertId(alertMasterDto.getId()).mId(value).alertIdentifier(MerchantUtil.generateUnique12DigitNumber()).alertDescription(alertMasterDto.getDescription()).build();
    }

    
    public MerchantResponse<AlertManagementResponse> getAlertsByMId(String mId) {
        log.info("Fetching unread alert descriptions for mId: {}", mId);
        List<AlertManagementResponse> alertManagementResponses = alertDao.getLatest50UnreadAlertDescription(mId);
        return MerchantResponse.<AlertManagementResponse>builder().data(alertManagementResponses).status(MerchantConstant.RESPONSE_SUCCESS).count((long) alertManagementResponses.size()).build();

    }

   
    public MerchantResponse<String> updateAlertViewStatus(String mId, long alertIdentifier) {

        log.info("Marking alert Identifier '{}' as viewed for mID '{}'", alertIdentifier, mId);
        alertDao.updateViewStatus(mId, alertIdentifier);
        return MerchantResponse.<String>builder().data(List.of("View updated successfully")).status(MerchantConstant.RESPONSE_SUCCESS).count(1L).total(1L).build();
    }

    public void generateAlertForMerchantAccountExpiry() {
        log.info("Starting execution of generateAlertForMerchantAccountExpiry");

        //Step 1 : Fetch Alert Master Data for Account Expiry and build Map as per Alert Master value
        List<AlertMasterDto> alertMasterDtoList = alertDao.findAllAlertByName(ACCOUNT_EXPIRY);
        Map<String, AlertMasterDto> alertMasterDtoMap = alertMasterDtoList.stream().collect(Collectors.toMap(AlertMasterDto::getValue, dto -> dto));

        //Step 2 : Fetch MId list with Alert Master Value data
        Map<String, String> mIdsWithExpiryDays = alertDao.getMIdsWithExpiryDays(alertMasterDtoMap.keySet().stream().toList());

        if (mIdsWithExpiryDays.isEmpty()) {
            log.info("No MIds found for the specified alert days. Exiting.");
            return;
        }

        //Step 3 : Build Alert Management For fetched MIds and Save Data in DB
        log.info("Total {} MIDs found for Alter generation", mIdsWithExpiryDays.size());
        List<AlertManagementDto> alertManagementDtoList = createAlertManagementDtoList(alertMasterDtoMap, mIdsWithExpiryDays);
        alertDao.saveAllToAlertManagement(alertManagementDtoList);
        log.info("Completed execution of generateAlertForMerchantAccountExpiry. Total alerts count {0}.", alertManagementDtoList.size());
    }

    private List<AlertManagementDto> createAlertManagementDtoList(Map<String, AlertMasterDto> alertMasterDtoMap, Map<String, String> mIdsWithExpiryDays) {
        return mIdsWithExpiryDays.entrySet().stream().map(entry -> buildAlertManagementDto(entry.getValue(), alertMasterDtoMap.get(entry.getKey()))).collect(Collectors.toList());
    }

  
    public void generateAlertForReport(ReportAlertDto reportAlertDto) {
        log.info("Updating reportStatus '{}'  for mID '{}'", reportAlertDto.getReportName(), reportAlertDto.getMId());
        alertDao.generateAlertForReport(reportAlertDto);
    }
}
