package com.epay.merchant.service;

import com.epay.merchant.config.MerchantConfig;
import com.epay.merchant.dao.CaptchaDao;
import com.epay.merchant.dto.CaptchaDto;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.mapper.CaptchaMapper;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.model.response.CaptchaResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantUtil;
import com.epay.merchant.util.enums.RequestType;
import com.epay.merchant.validator.CaptchaValidator;
import com.sbi.epay.captcha.impl.DefaultKaptcha;
import com.sbi.epay.logging.utility.LoggerUtility;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import java.awt.image.BufferedImage;
import java.util.Base64;
import java.util.List;
import java.util.UUID;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CaptchaServiceTest {

    @Mock private LoggerUtility logger;
    @Mock private MerchantConfig merchantConfig;
    @Mock private CaptchaDao captchaDao;
    @Mock private DefaultKaptcha captchaProducer;
    @Mock private CaptchaValidator captchaValidator;
    @Mock private CaptchaMapper captchaMapper;
  
    @InjectMocks private CaptchaService captchaService;

    private CaptchaRequest captchaRequest;
    private UUID requestId;
    private CaptchaDto captchaDto;

    @BeforeEach
    void setUp() {
        requestId = UUID.randomUUID();
        captchaRequest = new CaptchaRequest();
        captchaRequest.setRequestId(requestId);
        captchaRequest.setRequestType(RequestType.NEW.name());

        captchaDto = new CaptchaDto();
    }

    @Test
    void testGenerateCaptcha_Success() {
        when(captchaProducer.createText()).thenReturn("ABCD");
        when(captchaDao.save(anyString(), any(), any(), anyBoolean())).thenReturn(captchaDto);
        when(captchaMapper.mapCaptchaDtoToCaptchaResponse(any(), anyString(), anyString())).thenReturn(new CaptchaResponse());

        MerchantResponse<CaptchaResponse> response = captchaService.generateCaptcha(captchaRequest);

        assertNotNull(response);
        assertEquals(1, response.getData().size());
        verify(captchaValidator, times(1)).requestValidator(captchaRequest);
        verify(captchaDao, times(1)).save(anyString(), any(), any(), anyBoolean());
    }

    @Test
    void testRegenerateCaptcha_Success() {
        when(captchaProducer.createText()).thenReturn("XYZ");
        when(captchaDao.save(anyString(), any(), any(), anyBoolean())).thenReturn(captchaDto);
        when(captchaMapper.mapCaptchaDtoToCaptchaResponse(any(), anyString(), anyString())).thenReturn(new CaptchaResponse());

        MerchantResponse<CaptchaResponse> response = captchaService.regenerateCaptcha(captchaRequest);

        assertNotNull(response);
        assertEquals(1, response.getData().size());
        verify(captchaValidator, times(1)).regenerateValidator(captchaRequest);
    }

    @Test
    void testGenerateCaptcha_Failure_InvalidRequest() {
        doThrow(new MerchantException("400", "Invalid request")).when(captchaValidator).requestValidator(captchaRequest);

        assertThrows(MerchantException.class, () -> captchaService.generateCaptcha(captchaRequest));
        verify(captchaValidator, times(1)).requestValidator(captchaRequest);
    }

    @Test
    void testGenerateCaptchaAudio_Success() {
        when(merchantConfig.getVoiceDir()).thenReturn("/voiceDir");
        when(merchantConfig.getVoiceName()).thenReturn("kevin16");
        when(merchantConfig.getTempDir()).thenReturn("/tmp");

        byte[] mockAudio = "audioData".getBytes();
        doReturn(mockAudio).when(captchaService).generateAudioCaptcha(anyString(), any());

        String base64Audio = captchaService.generateCaptchaAudio("ABCD", requestId);

        assertNotNull(base64Audio);
        assertFalse(base64Audio.isEmpty());
    }

    @Test
    void testGenerateCaptchaAudio_Failure() {
        when(merchantConfig.getTempDir()).thenReturn(null);

        Exception exception = assertThrows(MerchantException.class, () -> captchaService.generateCaptchaAudio("1234", requestId));
        assertTrue(exception.getMessage().contains("Temporary directory is not configured"));
    }

    @Test
    void testGenerateCaptchaImage_Success() {
        BufferedImage mockImage = mock(BufferedImage.class);
        when(captchaProducer.createImage(anyString())).thenReturn(mockImage);
        when(MerchantUtil.convertImageToBase64(any(), anyString())).thenReturn(Base64.getEncoder().encodeToString("testImage".getBytes()));

        String base64Image = captchaService.generateCaptchaImage("1234");

        assertNotNull(base64Image);
        verify(captchaProducer, times(1)).createImage("1234");
    }

    @Test
    void testGenerateCaptchaImage_Failure() {
        when(captchaProducer.createImage(anyString())).thenThrow(new RuntimeException("Image generation failed"));

        assertThrows(RuntimeException.class, () -> captchaService.generateCaptchaImage("1234"));
    }

    @Test
    void testEncodeToBase64_Success() {
        byte[] sampleData = "testData".getBytes();
        String encoded = captchaService.encodeToBase64(sampleData, requestId);

        assertNotNull(encoded);
        assertFalse(encoded.isEmpty());
    }

    @Test
    void testEncodeToBase64_EmptyArray() {
        String encoded = captchaService.encodeToBase64(new byte[0], requestId);
        assertTrue(encoded.isEmpty());
    }
}