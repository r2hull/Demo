package com.epay.reporting.validator;

import com.epay.reporting.exception.ValidationException;
import com.epay.reporting.model.request.ReportScheduleManagementRequest;
import com.epay.reporting.model.request.ReportScheduleManagementSearchRequest;
import com.epay.reporting.util.enums.Frequency;
import com.epay.reporting.util.enums.Report;
import com.epay.reporting.util.enums.ReportFormat;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;


@Component
@RequiredArgsConstructor
public class ReportScheduleManagementValidator extends BaseValidator {

    private final MIdValidator mIdValidator;
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());


  
    public void validateRequest(ReportScheduleManagementRequest reportScheduleManagementRequest) {
        logger.debug("Request Validation start for {}", reportScheduleManagementRequest);
        errorDtoList = new ArrayList<>();
        validationMandatory(reportScheduleManagementRequest);
        validateFieldValue(reportScheduleManagementRequest);
        mIdValidator.validateActiveMId(reportScheduleManagementRequest.getMId());//mock
        logger.debug("Request Validation end for {}", reportScheduleManagementRequest);
    }
 
    public void validateRequest(ReportScheduleManagementSearchRequest searchRequest) {
        logger.debug("SearchRequest Validation start for {}", searchRequest);
        errorDtoList = new ArrayList<> ();
        validationMandatory(searchRequest);
        // mIdValidator.validatedMId(searchRequest.getMId());
        logger.debug("SearchRequest Validation end for {}", searchRequest);
    }


    private void validationMandatory(ReportScheduleManagementRequest reportScheduleManagementRequest) {
        checkMandatoryField(reportScheduleManagementRequest.getMId(), "MId");
        checkMandatoryField(reportScheduleManagementRequest.getReport(), "Report");
        checkMandatoryField(reportScheduleManagementRequest.getScheduleExecutionTime(), "Schedule Time");
        checkMandatoryField(reportScheduleManagementRequest.getFormat(), "Format");
        checkMandatoryField(reportScheduleManagementRequest.getFrequency(), "Frequency");
        throwIfErrors();
    }



    private void validateFieldValue(ReportScheduleManagementRequest reportScheduleManagementRequest) {
        validateFieldValue(reportScheduleManagementRequest.getReport(), List.of(Report.ORDER.name(), Report.REFUNDS.name(), Report.TRANSACTION.name(), Report.SETTLEMENTS.name(), Report.CHARGEBACK.name()), "Report");
        validateFieldValue(reportScheduleManagementRequest.getFrequency(), List.of(Frequency.DAILY.name(), Frequency.MONTHLY.name(), Frequency.YEARLY.name()), "Frequency");
        validateFieldValue(reportScheduleManagementRequest.getFormat(), List.of(ReportFormat.CSV.name(), ReportFormat.XLS.name(), ReportFormat.PDF.name()), "Format");
    }


    private void validationMandatory(ReportScheduleManagementSearchRequest searchRequest) {
        checkMandatoryField(searchRequest.getMId(), "MId");
        throwIfErrors();
    }


}



@Builder
@NoArgsConstructor
public class ReportScheduleManagementRequest {

    private String report;
    private String mId;
    private String frequency;
    private String format;
    private String scheduleExecutionTime;

}


@Builder
@NoArgsConstructor
public class ReportScheduleManagementSearchRequest {

    private String report;
    private String mId;
    private String frequency;
    private String format;
    private Long scheduleStartExecutionTime;
    private Long scheduleEndExecutionTime;

}
