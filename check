@Modifying
@Transactional
@Query(value = """
    INSERT INTO MERCHANT_TXN_MULTI_ACC_PAYOUT_HISTORY (
        MTMAP_ID, RFS_ID, MTP_ID, MERCHANT_ID,
        MERCHANT_ACC_PAYOUT, BANK_ID, BANK_IFSC_CODE,
        BANK_ACC_NUMBER, REMARK
    )
    SELECT
        m.MTMAP_ID, m.RFS_ID, m.MTP_ID, m.MERCHANT_ID,
        m.MERCHANT_ACC_PAYOUT, m.BANK_ID, m.BANK_IFSC_CODE,
        m.BANK_ACC_NUMBER, m.REMARK
    FROM MERCHANT_TXN_MULTI_ACC_PAYOUT m
    JOIN RECON_FILE_SUMMARY r ON m.RFS_ID = r.RFS_ID
    WHERE r.PAYOUT_STATUS = 'SUCCESS'
    """, nativeQuery = true)
int insertSuccessPayoutsIntoHistory();




@Modifying
@Transactional
@Query(value = """
    DELETE FROM MERCHANT_TXN_MULTI_ACC_PAYOUT
    WHERE RFS_ID IN (
        SELECT r.RFS_ID
        FROM RECON_FILE_SUMMARY r
        WHERE r.PAYOUT_STATUS = 'SUCCESS'
    )
    """, nativeQuery = true)
int deleteSuccessPayoutsFromMain();



@Service
@RequiredArgsConstructor
public class MerchantPayoutService {

    private final MerchantTxnPayoutRepository payoutRepository;

    @Transactional
    public void archiveAndPurgeSuccessPayouts() {
        int inserted = payoutRepository.insertSuccessPayoutsIntoHistory();
        int deleted = payoutRepository.deleteSuccessPayoutsFromMain();

        System.out.println("‚úÖ Inserted to history: " + inserted);
        System.out.println("üóëÔ∏è Deleted from main: " + deleted);
    }
}