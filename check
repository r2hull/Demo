private Pageable validateAndSanitizePageable(Pageable pageable, int maxSize, String defaultSortField, Class<?> dtoClass) {
    // Check size limit
    if (pageable.getPageSize() > maxSize) {
        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Page size cannot be greater than " + maxSize);
    }

    // Get allowed fields from DTO class
    Set<String> allowedFields = Arrays.stream(dtoClass.getDeclaredFields())
            .map(Field::getName)
            .collect(Collectors.toSet());

    boolean hasInvalidSort = pageable.getSort().stream()
            .anyMatch(order -> {
                String property = order.getProperty();
                return property == null || property.equalsIgnoreCase("null") || !allowedFields.contains(property);
            });

    // If any invalid sort field, fallback to default
    if (pageable.getSort().isUnsorted() || hasInvalidSort) {
        return PageRequest.of(
                pageable.getPageNumber(),
                pageable.getPageSize(),
                Sort.by(Sort.Direction.DESC, defaultSortField)
        );
    }

    return pageable;
}