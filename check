Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.web.servlet.HandlerExceptionResolver]: Factory method 'handlerExceptionResolver' threw exception with message: Ambiguous @ExceptionHandler method mapped for [class org.springframework.web.bind.MethodArgumentNotValidException]: {protected org.springframework.http.ResponseEntity com.epay.merchant.exceptionhandlers.MerchantExceptionHandler.handleValidationException(org.springframework.web.bind.MethodArgumentNotValidException), public final org.springframework.http.ResponseEntity org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler.handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest) throws java.lang.Exception}


 @PostMapping("/onboarding")
    @Operation(summary = "Onboarding Merchant and Merchant Admin User Creation API for SBI Admin Use.", description = "This API is used to onboard a merchant and create a merchant admin user.It can only be accessed by SBI Admin.")
    public MerchantResponse<OnboardingResponse> onboardingMerchant(@Valid @RequestBody OnboardingRequest onboardingRequest) {
        log.info("Onboarding Merchant called: onboardingRequest {}", onboardingRequest);
        return adminService.onboardingMerchant(onboardingRequest);
    }


@Builder
@Data
@JsonInclude(JsonInclude.Include.NON_NULL)
public class OnboardingRequest implements Serializable {
    @NotBlank(message = "check is mandatory")
    private String check;
    private MerchantDto merchant;
    private MerchantUserDto user;
}



package com.epay.merchant.exceptionhandlers;

import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.exception.MerchantException;
import com.epay.merchant.exception.ValidationException;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.ErrorConstants;
import com.epay.merchant.util.MerchantConstant;
import com.sbi.epay.encryptdecrypt.exception.EncryptionDecryptionException;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.ConstraintViolationException;
import org.hibernate.exception.SQLGrammarException;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.security.authorization.AuthorizationDeniedException;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.ArrayList;
import java.util.List;


@ControllerAdvice
public class MerchantExceptionHandler extends ResponseEntityExceptionHandler {
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

 
    @ExceptionHandler(value = {MerchantException.class, EncryptionDecryptionException.class})
    public ResponseEntity<Object> handleEPayServiceException(RuntimeException ex) {
        ErrorDto errorDto;
        switch (ex) {
            case MerchantException me ->
                    errorDto = ErrorDto.builder().errorCode(me.getErrorCode()).errorMessage(me.getErrorMessage()).build();
            case EncryptionDecryptionException me ->
                    errorDto = ErrorDto.builder().errorCode(me.getErrorCode()).errorMessage(me.getErrorMessage()).build();
            default ->
                    errorDto = ErrorDto.builder().errorCode(ErrorConstants.GENERIC_ERROR_CODE).errorMessage(ex.getLocalizedMessage()).build();
        }
        return generateResponseWithErrors(List.of(errorDto));
    }

 
    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<Object> handleValidationException(ValidationException ex) {
        if (CollectionUtils.isEmpty(ex.getErrorMessages())) {
            ErrorDto errorDto = ErrorDto.builder().errorCode(ex.getErrorCode()).errorMessage(ex.getErrorMessage()).build();
            return generateResponseWithErrors(List.of(errorDto));
        }
        return generateResponseWithErrors(ex.getErrorMessages());
    }

    @ExceptionHandler(value={MethodArgumentNotValidException.class})
    protected ResponseEntity<Object> handleValidationException(MethodArgumentNotValidException ex) {
        List<ErrorDto> errors = new ArrayList<>();
        ex.getBindingResult().getFieldErrors().forEach(fieldError ->
                errors.add(ErrorDto.builder()
                        .errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE)
                        .errorMessage(fieldError.getField() + ":" + fieldError.getDefaultMessage())
                        .build())
        );

        return ResponseEntity.status(HttpStatus.OK)
                .body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(errors).build());
    }

    @ExceptionHandler(value = {DataAccessException.class, DataIntegrityViolationException.class, ConstraintViolationException.class, SQLGrammarException.class})
    public ResponseEntity<Object> handleDBException(Exception ex) {
        String errorMessage;
        switch (ex) {
            case DataIntegrityViolationException de -> errorMessage = de.getMostSpecificCause().getMessage();
            case DataAccessException de -> errorMessage = de.getMostSpecificCause().getMessage();
            case ConstraintViolationException de -> errorMessage = de.getConstraintViolations().toString();
            case SQLGrammarException de -> errorMessage = de.getLocalizedMessage();
            default -> errorMessage = ex.getMessage();
        }
        logger.error("Error in handleDBException ", errorMessage);
        ErrorDto errorDto = ErrorDto.builder().errorCode(ErrorConstants.GENERIC_ERROR_CODE).errorMessage(errorMessage).build();
        return ResponseEntity.internalServerError().body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build());
    }

    @ExceptionHandler(value = {AuthorizationDeniedException.class})
    public ResponseEntity<Object> handleAuthorizationDeniedException(AuthorizationDeniedException ex) {
        logger.error("Error in handleAuthorizationDeniedException ", ex);
        ErrorDto errorDto = ErrorDto.builder().errorCode(String.valueOf(HttpStatus.FORBIDDEN.value())).errorMessage(ex.getMessage() + ": Not having the necessary permissions to access this resources").build();
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build());
    }

  
    @ExceptionHandler(value = {Exception.class})
    public ResponseEntity<Object> handleGenericException(Exception ex) {
        logger.error("Error in handleGenericException ", ex);
        ErrorDto errorDto = ErrorDto.builder().errorCode(String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value())).errorMessage(ex.getMessage()).build();
        return ResponseEntity.internalServerError().body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build());
    }

   
    @ExceptionHandler(value = {IllegalArgumentException.class, IllegalStateException.class})
    protected ResponseEntity<Object> handleConflict(RuntimeException ex) {
        logger.error("Error in handleConflict ", ex);
        ErrorDto errorDto = ErrorDto.builder().errorCode(String.valueOf(HttpStatus.CONFLICT.value())).errorMessage(ex.getLocalizedMessage()).build();
        return ResponseEntity.status(HttpStatus.CONFLICT).body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build());
    }

    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatusCode statusCode, WebRequest request) {
        if (request instanceof ServletWebRequest servletWebRequest) {
            HttpServletResponse response = servletWebRequest.getResponse();
            if (response != null && response.isCommitted()) {
                return null;
            }
        }
        ErrorDto errorDto = ErrorDto.builder().errorCode(String.valueOf(statusCode.value())).errorMessage(ex.getLocalizedMessage()).build();
        return ResponseEntity.status(statusCode).body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build());
    }

    
    private ResponseEntity<Object> generateResponseWithErrors(List<ErrorDto> errors) {
        return ResponseEntity.ok().body(MerchantResponse.builder().status(MerchantConstant.RESPONSE_FAILURE).errors(errors).build());
    }
}
