public void validateMultiAccount(List<String> getMultiAccountApiDetails, List<MultiAccountDto> multiAccountDetails, BigDecimal orderAmount) {
    errorDtoList.clear();
    logger.info("getMultiAccountApiDetails: {}", getMultiAccountApiDetails);

    BigDecimal totalMultiAccountAmount = BigDecimal.ZERO;

    for (MultiAccountDto multiAccountDto : multiAccountDetails) {
        String accountIdentifier = multiAccountDto.getAccountIdentifier();

        if (!getMultiAccountApiDetails.contains(accountIdentifier)) {
            logger.error("Invalid MultiAccount: Account Identifier {} not found", accountIdentifier);
            addError(OrderErrorConstant.INVALID_ERROR_CODE, 
                     MessageFormat.format(OrderErrorConstant.INVALID_ERROR_MESSAGE, 
                                          "Multi Account", 
                                          "Invalid multiAccount: Account Identifier not found."));
            throwIfErrors(); // Stop processing if an invalid account is found
            return;
        }

        totalMultiAccountAmount = totalMultiAccountAmount.add(multiAccountDto.getAmount());
    }

    // Validate total amount
    if (orderAmount.compareTo(totalMultiAccountAmount) != 0) {
        logger.error("Order amount mismatch: Expected {}, but multiAccount total is {}", orderAmount, totalMultiAccountAmount);
        addError(OrderErrorConstant.INVALID_ERROR_CODE, 
                 MessageFormat.format(OrderErrorConstant.INVALID_ERROR_MESSAGE, 
                                      "Multi Account Total Amount", 
                                      "Order amount and multiAccount amount mismatch."));
    }

    throwIfErrors(); // Throws exception if any error was added
}