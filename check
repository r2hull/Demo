private void checkAndUpdateBulkRefundBooking(String bulkId) {
        BulkRefundBooking bulkRefundBooking = refundDao.findByBulkId(bulkId, null);
        if (bulkRefundBooking == null) {
            logger.error("BulkRefundBooking not found for bulkId: {}", bulkId);
            return;
        }

        int totalRecords = bulkRefundBooking.getTotalRecords();
        Object[] counts = refundDao.getProcessedAndFailedCounts(bulkId);

        // Extract counts from the result array
        int processedCount = ((Number) counts[0]).intValue(); // Total processed (pass + fail)
        int passCount = ((Number) counts[1]).intValue();     // CANCELLATION_BOOKED
        int failCount = ((Number) counts[2]).intValue();     // REFUND_FAILED

        if (processedCount == totalRecords) {
            bulkRefundBooking.setValidRecords(passCount);
            bulkRefundBooking.setInvalidRecords(failCount);
            bulkRefundBooking.setRemark(failCount > 0 ? PARTIAL_PROCESS_MESSAGE : SUCCESS_PROCESS_MESSAGE);
            bulkRefundBooking.setBulkRefundStatus(BulkRefundStatus.PROCESSED.name());

            refundDao.saveBulkRefundBooking(bulkRefundBooking);
            logger.info("All rows processed, updated BulkRefundBooking: {} for bulkId: {}", bulkRefundBooking, bulkId);
        } else {
            logger.info("Not all rows processed yet for bulkId: {}. Total: {}, Processed: {} (Pass: {}, Fail: {})", 
                        bulkId, totalRecords, processedCount, passCount, failCount);
        }
    }



@@Query("""
        SELECT 
            COUNT(d) as totalProcessed, 
            SUM(CASE WHEN d.refundStatus = 'CANCELLATION_BOOKED' THEN 1 ELSE 0 END) as passCount, 
            SUM(CASE WHEN d.refundStatus = 'REFUND_FAILED' THEN 1 ELSE 0 END) as failCount 
        FROM BulkRefundBookingDetails d 
        WHERE d.bulkId = :bulkId 
        AND d.refundStatus IN ('CANCELLATION_BOOKED', 'REFUND_FAILED')
    """)
    Object[] getProcessedAndFailedCounts(@Param("bulkId") String bulkId);
