public class TransactionSpecification {

    public static Specification<MerchantOrderPayment> searchTransaction(
            String mId, MerchantOrderPaymentSearchRequest request) {

        return (root, query, cb) -> {

            // LEFT JOIN order
            Join<MerchantOrderPayment, Order> orderJoin = root.join("order", JoinType.LEFT);

            // multiselect columns for DTO
            query.multiselect(
                root.get("atrnNumber"),
                root.get("availableRefundAmount"),
                root.get("bankReferenceNumber"),
                root.get("cancellationStatus"),
                root.get("channelBank"),
                root.get("chargebackAmount"),
                root.get("chargebackStatus"),
                root.get("cin"),
                orderJoin.get("createdBy"),
                orderJoin.get("createdDate"),
                orderJoin.get("currencyCode"),
                root.get("debitAmount"),
                root.get("failReason"),
                root.get("gtwIssueMECode"),
                root.get("gstIn"),
                orderJoin.get("merchantId"),
                root.get("oldBankReferenceNumber"),
                orderJoin.get("sbiOrderRefNumber"),
                orderJoin.get("orderAmount"),
                orderJoin.get("orderRefNumber"),
                root.get("payMode"),
                root.get("payProcId"),
                root.get("paymentStatus"),
                root.get("paymentSuccessDate"),
                root.get("paymodeType"),
                root.get("pgBankCode"),
                root.get("pushResponse"),
                root.get("pushStatus"),
                root.get("refundStatus"),
                root.get("rfId"),
                root.get("settlementStatus")
            );

            Predicate predicate = cb.conjunction();

            // filter by merchant id (mandatory)
            predicate = cb.and(predicate, cb.equal(root.get("mId"), mId));

            // dynamic filters
            if (StringUtils.hasText(request.getSbiOrderRefNumber())) {
                predicate = cb.and(predicate, cb.equal(orderJoin.get("sbiOrderRefNumber"), request.getSbiOrderRefNumber()));
            }
            if (StringUtils.hasText(request.getAtrn())) {
                predicate = cb.and(predicate, cb.equal(root.get("atrnNumber"), request.getAtrn()));
            }
            if (StringUtils.hasText(request.getOrderRefNumber())) {
                predicate = cb.and(predicate, cb.equal(root.get("orderRefNumber"), request.getOrderRefNumber()));
            }
            if (StringUtils.hasText(request.getBankRefNumber())) {
                predicate = cb.and(predicate, cb.equal(root.get("bankReferenceNumber"), request.getBankRefNumber()));
            }
            if (StringUtils.hasText(request.getTransactionStatus())) {
                predicate = cb.and(predicate, cb.equal(root.get("transactionStatus"), request.getTransactionStatus()));
            }
            if (StringUtils.hasText(request.getPaymentStatus())) {
                predicate = cb.and(predicate, cb.equal(root.get("paymentStatus"), request.getPaymentStatus()));
            }
            if (StringUtils.hasText(request.getOrderStatus())) {
                predicate = cb.and(predicate, cb.equal(orderJoin.get("status"), request.getOrderStatus()));
            }
            if (StringUtils.hasText(request.getRefundStatus())) {
                predicate = cb.and(predicate, cb.equal(root.get("refundStatus"), request.getRefundStatus()));
            }
            if (request.getFromDate() != null) {
                predicate = cb.and(predicate, cb.greaterThanOrEqualTo(root.get("createdDate"), request.getFromDate()));
            }
            if (request.getToDate() != null) {
                predicate = cb.and(predicate, cb.lessThanOrEqualTo(root.get("createdDate"), request.getToDate()));
            }

            return predicate;
        };
    }
}




@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class MerchantOrderPaymentDTO {
    private String atrnNumber;
    private BigDecimal availableRefundAmount;
    private String bankReferenceNumber;
    private String cancellationStatus;
    private String channelBank;
    private BigDecimal chargebackAmount;
    private String chargebackStatus;
    private String cin;
    private String orderCreatedBy;
    private Long orderCreatedDate;
    private String orderCurrencyCode;
    private BigDecimal debitAmount;
    private String failReason;
    private String gtwIssueMECode;
    private String gstIn;
    private String orderMerchantId;
    private String oldBankReferenceNumber;
    private String sbiOrderRefNumber;
    private BigDecimal orderAmount;
    private String orderRefNumber;
    private String payMode;
    private String payProcId;
    private String paymentStatus;
    private Long paymentSuccessDate;
    private String paymodeType;
    private String pgBankCode;
    private String pushResponse;
    private String pushStatus;
    private String refundStatus;
    private UUID rfId;
    private String settlementStatus;
}







List<MerchantOrderPaymentDTO> results = entityManager.createQuery(specification).getResultList();

