import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.sound.sampled.AudioFileFormat;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.MessageFormat;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CaptchaServiceTest {

    @InjectMocks
    private CaptchaService captchaService;

    @Mock
    private MerchantConfig merchantConfig;

    @Mock
    private Voice mockVoice;

    @Mock
    private SingleFileAudioPlayer mockAudioPlayer;

    @Mock
    private File tempFile;

    private UUID requestId;
    private final String sampleText = "Test";

    @BeforeEach
    void setUp() {
        requestId = UUID.randomUUID();
    }

    @Test
    void generateAudioCaptcha_ShouldReturnByteArray_WhenSuccessful() throws Exception {
        // Mock system property behavior
        when(merchantConfig.getVoiceDir()).thenReturn("com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");

        // Mock temp file creation
        when(tempFile.exists()).thenReturn(true);
        when(tempFile.length()).thenReturn(100L);
        when(tempFile.toPath()).thenReturn(new File("temp.wav").toPath());

        // Mock method calls
        doNothing().when(mockVoice).setAudioPlayer(mockAudioPlayer);
        doNothing().when(mockAudioPlayer).close();

        // Spy on service to override actual method calls
        CaptchaService spyService = spy(captchaService);
        doReturn(tempFile).when(spyService).createTempFile(requestId);
        doReturn(mockVoice).when(spyService).initializeVoice();
        doReturn(mockAudioPlayer).when(spyService).configureAudioPlayer(tempFile);
        doReturn(new byte[]{1, 2, 3}).when(spyService).validateAndReturnAudio(tempFile, requestId);

        byte[] result = spyService.generateAudioCaptcha(sampleText, requestId);

        assertNotNull(result);
        assertTrue(result.length > 0);
        verify(mockAudioPlayer, times(1)).close();
    }

    @Test
    void generateAudioCaptcha_ShouldReturnEmptyByteArray_WhenTempFileCreationFails() {
        CaptchaService spyService = spy(captchaService);
        doReturn(null).when(spyService).createTempFile(requestId);

        byte[] result = spyService.generateAudioCaptcha(sampleText, requestId);

        assertArrayEquals(new byte[0], result, "Should return empty byte array when temp file is null");
    }

    @Test
    void generateAudioCaptcha_ShouldReturnEmptyByteArray_WhenVoiceInitializationFails() {
        CaptchaService spyService = spy(captchaService);
        doReturn(tempFile).when(spyService).createTempFile(requestId);
        doReturn(null).when(spyService).initializeVoice();

        byte[] result = spyService.generateAudioCaptcha(sampleText, requestId);

        assertArrayEquals(new byte[0], result, "Should return empty byte array when voice initialization fails");
    }

    @Test
    void generateAudioCaptcha_ShouldThrowException_WhenErrorOccurs() {
        CaptchaService spyService = spy(captchaService);
        doReturn(tempFile).when(spyService).createTempFile(requestId);
        doThrow(new RuntimeException("Test Exception")).when(spyService).initializeVoice();

        MerchantException exception = assertThrows(MerchantException.class, () ->
                spyService.generateAudioCaptcha(sampleText, requestId)
        );

        assertEquals(ErrorConstants.GENERATION_ERROR_CODE, exception.getCode());
    }

    @Test
    void generateAudioCaptcha_ShouldHandleFileDeletionException() throws IOException {
        CaptchaService spyService = spy(captchaService);
        doReturn(tempFile).when(spyService).createTempFile(requestId);
        doReturn(mockVoice).when(spyService).initializeVoice();
        doReturn(mockAudioPlayer).when(spyService).configureAudioPlayer(tempFile);
        doThrow(new IOException("File deletion failed")).when(Files.class);
        Files.delete(tempFile.toPath());

        assertDoesNotThrow(() -> spyService.generateAudioCaptcha(sampleText, requestId));
    }
}