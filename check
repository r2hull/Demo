package com.epay.merchant.validator;

import com.epay.merchant.dao.CaptchaDao;
import com.epay.merchant.dto.ErrorDto;
import com.epay.merchant.entity.cache.CaptchaManagement;
import com.epay.merchant.model.request.CaptchaRequest;
import com.epay.merchant.util.DateTimeUtils;
import com.epay.merchant.util.ErrorConstants;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.UUID;

import static com.epay.merchant.util.ErrorConstants.REQUEST_ID;
import static com.epay.merchant.util.ErrorConstants.REQUEST_TYPE;
import static com.epay.merchant.util.MerchantConstant.CAPTCHA;

@Component
@RequiredArgsConstructor
public class CaptchaValidator extends BaseValidator {

    private final CaptchaDao captchaDao;

  
    public void requestValidator(CaptchaRequest captchaRequest) {
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(captchaRequest);
        duplicateCheck(captchaRequest);
    }

  
    public void regenerateValidator(CaptchaRequest captchaRequest) {
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(captchaRequest);
        requestIdCheck(captchaRequest);
    }

   
    public void captchaValueValidation(UUID requestId, String captchaText) {
        errorDtoList = new ArrayList<>();
        CaptchaManagement captchaDetails = captchaDao.getActiveCaptchaByRequestId(requestId);
        isCaptchaExpiry(DateTimeUtils.isPastDate(captchaDetails.getExpiryTime()));
        matchCaptcha(captchaText, captchaDetails.getCaptchaText());
    }

  
    public void isCaptchaVerifiedValidation(UUID requestId) {
        errorDtoList = new ArrayList<>();
        boolean isVerified = captchaDao.existByRequestIdAndVerified(requestId);
        isCaptchaVerified(isVerified);
    }

 
    private void validateMandatoryFields(CaptchaRequest captchaRequest) {
        checkMandatoryField(captchaRequest.getRequestId(), REQUEST_ID);
        checkMandatoryField(captchaRequest.getRequestType(), REQUEST_TYPE);
        throwIfErrors();
    }

  
    private void duplicateCheck(CaptchaRequest captchaRequest) {
        if (captchaDao.existsByRequestId(captchaRequest.getRequestId())) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.INVALID_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "RequestId", "Reason : Duplicate RequestId")).build());
        }
        throwIfErrors();
    }

    private void requestIdCheck(CaptchaRequest captchaRequest) {
        if (!captchaDao.existsByRequestId(captchaRequest.getRequestId())) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_CODE, REQUEST_ID)).build());
        }
        throwIfErrors();
    }

   
    private void isCaptchaExpiry(boolean captchaDetails) {
        if (captchaDetails) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.EXPIRY_TIME_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.EXPIRY_TIME_ERROR_MESSAGE, CAPTCHA)).build());
        }
        throwIfErrors();
    }


    private void isCaptchaVerified(boolean isVerified) {
        if (!isVerified) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.NOT_VERIFIED_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.NOT_VERIFIED_ERROR_MESSAGE, CAPTCHA)).build());
        }
        throwIfErrors();
    }

    private void matchCaptcha(String loginCaptchaImage, String dbCaptchaTextHash) {
        if (!StringUtils.equals(loginCaptchaImage, dbCaptchaTextHash)) {
            errorDtoList.add(ErrorDto.builder().errorCode(ErrorConstants.NOT_FOUND_ERROR_CODE).errorMessage(MessageFormat.format(ErrorConstants.NOT_FOUND_ERROR_MESSAGE, CAPTCHA)).build());
        }
        throwIfErrors();
    }

}
