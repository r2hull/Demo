@ExceptionHandler(value = {MethodArgumentNotValidException.class})
protected ResponseEntity<Object> handleValidationException(MethodArgumentNotValidException ex) {
    Map<String, String> fieldErrors = new HashMap<>();

    ex.getBindingResult().getFieldErrors().forEach(fieldError -> {
        String fieldName = fieldError.getField();
        String errorMessage = fieldError.getDefaultMessage();

        // Ensure "must not have leading, trailing, or multiple spaces" error is prioritized
        if (!fieldErrors.containsKey(fieldName) || errorMessage.contains("must not have leading, trailing, or multiple spaces")) {
            fieldErrors.put(fieldName, errorMessage);
        }
    });

    List<ErrorDto> errors = fieldErrors.entrySet().stream()
        .map(entry -> ErrorDto.builder()
            .errorCode(ErrorConstant.NOT_FOUND_ERROR_CODE)
            .errorMessage(entry.getKey() + ": " + entry.getValue())
            .build())
        .collect(Collectors.toList());

    return ResponseEntity.status(HttpStatus.OK)
        .body(KMSResponse.builder()
            .status(KmsConstant.RESPONSE_FAILURE)
            .errors(errors)
            .build());
}