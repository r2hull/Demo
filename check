package com.epay.merchant.validator;

import com.epay.merchant.dao.AdminDao;
import com.epay.merchant.dto.MerchantDto;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.exception.ValidationException;
import com.epay.merchant.model.request.OnboardingRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class OnboardingValidatorTest {

    @InjectMocks
    private OnboardingValidator onboardingValidator;

    @Mock
    private AdminDao adminDao;

    private OnboardingRequest onboardingRequest;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        onboardingRequest = new OnboardingRequest();
        MerchantDto merchant = new MerchantDto();
        MerchantUserDto user = new MerchantUserDto();
        
        merchant.setMId("123");
        merchant.setMerchantName("Test Merchant");
        merchant.setMobileNumber("9876543210");
        merchant.setPrimaryEmail("test@example.com");

        user.setUserName("testuser");
        user.setEmail("user@example.com");
        user.setMobilePhone("9999999999");

        onboardingRequest.setMerchant(merchant);
        onboardingRequest.setUser(user);
    }

    @Test
    void testValidateOnboardingRequest_Success() {
        when(adminDao.isMerchantExistByMId(anyString())).thenReturn(false);
        when(adminDao.isMerchantUserExist(anyString(), anyString(), anyString())).thenReturn(false);

        assertDoesNotThrow(() -> onboardingValidator.validateOnboardingRequest(onboardingRequest));
    }

    @Test
    void testValidateOnboardingRequest_MerchantExists() {
        when(adminDao.isMerchantExistByMId(anyString())).thenReturn(true);

        ValidationException exception = assertThrows(ValidationException.class, () -> onboardingValidator.validateOnboardingRequest(onboardingRequest));
        assertTrue(exception.getErrors().stream().anyMatch(e -> e.getErrorMessage().contains("MId")));
    }

    @Test
    void testValidateOnboardingRequest_UserExists() {
        when(adminDao.isMerchantUserExist(anyString(), anyString(), anyString())).thenReturn(true);

        ValidationException exception = assertThrows(ValidationException.class, () -> onboardingValidator.validateOnboardingRequest(onboardingRequest));
        assertTrue(exception.getErrors().stream().anyMatch(e -> e.getErrorMessage().contains("Merchant User")));
    }

    @Test
    void testValidateMandatoryFields_MissingFields() {
        onboardingRequest.getMerchant().setMerchantName(null);
        assertThrows(ValidationException.class, () -> onboardingValidator.validateOnboardingRequest(onboardingRequest));
    }
}