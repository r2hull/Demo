package com.epay.rns.utils;

import com.jcraft.jsch.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

public class SftpClientUtil {
    private String host;
    private String username;
    private String password;
    private int port;
    private Session session;
    private ChannelSftp channelSftp;

    public SftpClientUtil(String host, String username, String password, int port) {
        this.host = host;
        this.username = username;
        this.password = password;
        this.port = port;
    }

    public void connect() throws JSchException {
        JSch jsch = new JSch();
        session = jsch.getSession(username, host, port);
        session.setPassword(password);
        session.setConfig("StrictHostKeyChecking", "no"); // Disable host key checking for testing
        System.out.println("Connecting to " + host + ":" + port + " with user " + username);
        session.connect();
        channelSftp = (ChannelSftp) session.openChannel("sftp");
        channelSftp.connect();
    }

    public void disconnect() {
        if (channelSftp != null && channelSftp.isConnected()) {
            channelSftp.exit();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
    }

    public void uploadFile(String localFilePath, String remoteFilePath) throws JSchException, SftpException {
        File localFile = new File(localFilePath);
        if (!localFile.exists()) {
            throw new SftpException(ChannelSftp.SSH_FX_NO_SUCH_FILE, "Local file does not exist: " + localFilePath);
        }
        channelSftp.put(localFilePath, remoteFilePath);
    }

    public void downloadFile(String remoteFilePath, String localFilePath) throws JSchException, SftpException {
        channelSftp.get(remoteFilePath, localFilePath);
    }
}

class SftpClientMain {
    private static final String HOST = "localhost";
    private static final String USERNAME = "root"; // Updated to match server
    private static final String PASSWORD = "root"; // Updated to match server
    private static final int PORT = 2222; // Matches current server port

    public static void main(String[] args) {
        SftpClientUtil sftpClient = new SftpClientUtil(HOST, USERNAME, PASSWORD, PORT);

        try {
            // Connect to the SFTP server
            sftpClient.connect();
            System.out.println("Connected to SFTP server");

            // Create a temporary file to upload
            Path tempFile = Files.createTempFile("test-upload-", ".txt");
            Files.writeString(tempFile, "Hello, SFTP!");
            String localFilePath = tempFile.toString();
            String remoteFilePath = "/test-file.txt";

            // Upload file
            sftpClient.uploadFile(localFilePath, remoteFilePath);
            System.out.println("File uploaded successfully to: " + remoteFilePath);

            // Download file
            Path downloadedFile = Files.createTempFile("test-download-", ".txt");
            String downloadedFilePath = downloadedFile.toString();
            sftpClient.downloadFile(remoteFilePath, downloadedFilePath);
            System.out.println("File downloaded successfully to: " + downloadedFilePath);

            // Verify content
            String downloadedContent = Files.readString(downloadedFile);
            System.out.println("Downloaded file content: " + downloadedContent);

//            // Clean up temporary files
//            Files.delete(tempFile);
//            Files.delete(downloadedFile);

        } catch (JSchException | SftpException | IOException e) {
            System.err.println("Error occurred: " + e.getMessage());
            e.printStackTrace();
        } finally {
            sftpClient.disconnect();
            System.out.println("Disconnected from SFTP server");
        }
    }
}





package com.epay.rns.server;

import com.epay.rns.beans.SftpServerBean;
import com.epay.rns.helpers.SftpServerUtils;
import org.apache.commons.cli.*;

import java.io.IOException;
import java.util.Scanner;

public class SFTPServer {
    private static final String HELP = "help";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "root";
    private static final int PORT = 2222;

    public static void main(String[] args) throws IOException {

        boolean running = true;
        SftpServerBean serverBean = SftpServerUtils.setupSftpServer(USERNAME, PASSWORD, PORT);
        System.out.println("Input 'q' to quit.");
        while (running) {
            Scanner scan = new Scanner(System.in);
            String line = scan.nextLine();
            if(line != null && line.equalsIgnoreCase("q")){
                SftpServerUtils.stopServer(serverBean);
                running = false;
            }
        }

    }

    private static boolean checkForHelp(Options options, CommandLine cmd) {
        if (cmd.hasOption(HELP)) {
            HelpFormatter fmt = new HelpFormatter();
            fmt.printHelp("Help", options);
            return true;
        }
        return false;
    }



}



package com.epay.rns.helpers;
import com.epay.rns.beans.SftpServerBean;
import com.epay.rns.server.SFTPServer;
import org.apache.sshd.common.NamedFactory;
import org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory;
import org.apache.sshd.server.SshServer;
import org.apache.sshd.server.auth.UserAuth;
import org.apache.sshd.server.auth.password.UserAuthPasswordFactory;
import org.apache.sshd.server.command.Command;
import org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider;
import org.apache.sshd.server.shell.ProcessShellCommandFactory;
import org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;


public class SftpServerUtils {
    /**
     * Setup a SFTP Server in localhost with a temp directory as root
     *
     * @throws IOException If it cannot create a temp dir
     */
    public static SftpServerBean setupSftpServer(String username, String password, int port) throws IOException {
        Path tempSftpDir = Paths.get( "C:\\SFTP") ;//Files.createTempDirectory(SFTPServer.class.getName());

        List<NamedFactory<UserAuth>> userAuthFactories = new ArrayList<>();
        userAuthFactories.add(new UserAuthPasswordFactory());

        List<NamedFactory<Command>> sftpCommandFactory = new ArrayList<>();
        sftpCommandFactory.add(new SftpSubsystemFactory());

        SshServer sshd = SshServer.setUpDefaultServer();
        sshd.setPort(port);
        sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider());
        sshd.setUserAuthFactories(userAuthFactories);
        sshd.setCommandFactory(new ProcessShellCommandFactory());
        sshd.setSubsystemFactories(sftpCommandFactory);
        sshd.setPasswordAuthenticator((usernameAuth, passwordAuth, session) -> {
            if ((username.equals(usernameAuth)) && (password.equals(passwordAuth))) {
                sshd.setFileSystemFactory(new VirtualFileSystemFactory(tempSftpDir));
                return true;
            }
            return false;
        });

        sshd.start();
        System.out.println("Started SFTP server with root path: " + tempSftpDir.toFile().getAbsolutePath());
        return new SftpServerBean(sshd, tempSftpDir);
    }

    public static void stopServer(SftpServerBean sftpServerBean) throws IOException {
        sftpServerBean.getSshServer().stop();
        Files.walk(sftpServerBean.getRootPath())
                .sorted(Comparator.reverseOrder())
                .map(Path::toFile)
                .forEach(File::delete);
    }
}




package com.epay.rns.beans;


import org.apache.sshd.server.SshServer;

import java.nio.file.Path;

public class SftpServerBean {
    private SshServer sshServer;
    private Path rootPath;

    public SftpServerBean(SshServer sshServer, Path rootPath) {
        this.sshServer = sshServer;
        this.rootPath = rootPath;
    }

    public SshServer getSshServer() {
        return sshServer;
    }

    public Path getRootPath() {
        return rootPath;
    }
}
