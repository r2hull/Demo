
    @Test
    void getCustomerByCustomerId_Success() {
        // Arrange
        try (MockedStatic<EPayIdentityUtil> mockedEPayIdentityUtil = Mockito.mockStatic(EPayIdentityUtil.class)) {
            SecurityContextHolder.getContext().setAuthentication(mock(Authentication.class));
            when(SecurityContextHolder.getContext().getAuthentication().getPrincipal()).thenReturn(mockEPayPrincipal);
            mockedEPayIdentityUtil.when(() -> EPayIdentityUtil.getUserPrincipal().getMId()).thenReturn("1234");

            try (MockedStatic<EncryptionService> mockedEncryptionService = Mockito.mockStatic(EncryptionService.class)) {
                mockedEncryptionService.when(() -> EncryptionService.encryptValueByStringKey(any(String.class), any(String.class), any(EncryptionDecryptionAlgo.class), any(GCMIvLength.class), any(GCMTagLength.class))).thenReturn("mockedEncryptedString");

                when(customerDao.getCustomerByCustomerId("1234", "test-customer-id")).thenReturn(testCustomerDto);
                when(customerDao.getMerchantMek()).thenReturn(testMek);

                // Act
                TransactionResponse<String> result = customerService.getCustomerByCustomerId(testCustomerId);

                // Assert
                assertNotNull(result);
                assertEquals(TransactionConstant.RESPONSE_SUCCESS, result.getStatus());
                assertNotNull(result.getData());
                assertEquals(1, result.getData().size());
                assertNotNull(result.getData().get(0));

                verify(customerValidator, times(1)).validateCustomerId(testCustomerId);
                verify(customerDao, times(1)).getCustomerByCustomerId("1234", "test-customer-id");
                verify(customerDao, times(1)).getMerchantMek();
            }
        }
    }
