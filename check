package com.epay.rns.utils;

import com.jcraft.jsch.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

public class SftpClientUtil {
    private String host;
    private String username;
    private String password;
    private int port;
    private Session session;
    private ChannelSftp channelSftp;

    public SftpClientUtil(String host, String username, String password, int port) {
        this.host = host;
        this.username = username;
        this.password = password;
        this.port = port;
    }

    public void connect() throws JSchException {
        JSch jsch = new JSch();
        session = jsch.getSession(username, host, port);
        session.setPassword(password);
        session.setConfig("StrictHostKeyChecking", "no");
        System.out.println("Connecting to " + host + ":" + port + " with user " + username);
        session.connect();
        channelSftp = (ChannelSftp) session.openChannel("sftp");
        channelSftp.connect();
    }

    public void disconnect() {
        if (channelSftp != null && channelSftp.isConnected()) {
            channelSftp.exit();
        }
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
    }

    public void uploadFile(String localFilePath, String remoteFilePath) throws JSchException, SftpException {
        File localFile = new File(localFilePath);
        if (!localFile.exists()) {
            throw new SftpException(ChannelSftp.SSH_FX_NO_SUCH_FILE, "Local file does not exist: " + localFilePath);
        }
        channelSftp.put(localFilePath, remoteFilePath);
    }

    public void downloadFile(String remoteFilePath, String localFilePath) throws JSchException, SftpException {
        channelSftp.get(remoteFilePath, localFilePath);
    }

    // New method to find the most recent file across multiple subfolders
    public RecentFileInfo findMostRecentFile(List<String> remoteSubfolders) throws SftpException {
        RecentFileInfo recentFileInfo = new RecentFileInfo();
        long latestMTime = 0;

        for (String subfolder : remoteSubfolders) {
            try {
                Vector<ChannelSftp.LsEntry> files = channelSftp.ls(subfolder);
                for (ChannelSftp.LsEntry entry : files) {
                    // Skip directories and special entries (., ..)
                    if (!entry.getAttrs().isDir() && !entry.getFilename().equals(".") && !entry.getFilename().equals("..")) {
                        long mTime = entry.getAttrs().getMTime() * 1000L; // Convert to milliseconds
                        if (mTime > latestMTime) {
                            latestMTime = mTime;
                            recentFileInfo.setFolder(subfolder);
                            recentFileInfo.setFileName(entry.getFilename());
                            recentFileInfo.setRemotePath(subfolder + "/" + entry.getFilename());
                        }
                    }
                }
            } catch (SftpException e) {
                System.err.println("Error listing files in " + subfolder + ": " + e.getMessage());
                // Continue checking other folders
            }
        }

        if (recentFileInfo.getRemotePath() == null) {
            throw new SftpException(ChannelSftp.SSH_FX_NO_SUCH_FILE, "No files found in specified subfolders");
        }
        return recentFileInfo;
    }

    // Helper class to store recent file information
    public static class RecentFileInfo {
        private String folder;
        private String fileName;
        private String remotePath;

        public String getFolder() {
            return folder;
        }

        public void setFolder(String folder) {
            this.folder = folder;
        }

        public String getFileName() {
            return fileName;
        }

        public void setFileName(String fileName) {
            this.fileName = fileName;
        }

        public String getRemotePath() {
            return remotePath;
        }

        public void setRemotePath(String remotePath) {
            this.remotePath = remotePath;
        }
    }
}






package com.epay.rns.utils;

import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;

class SftpClientMain {
    private static final String HOST = "localhost";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "root";
    private static final int PORT = 2222;

    public static void main(String[] args) {
        SftpClientUtil sftpClient = new SftpClientUtil(HOST, USERNAME, PASSWORD, PORT);

        try {
            // Connect to the SFTP server
            sftpClient.connect();
            System.out.println("Connected to SFTP server");

            // Create a temporary file to upload
            Path tempFile = Files.createTempFile("test-upload-", ".txt");
            Files.writeString(tempFile, "Hello, SFTP! Uploaded at " + System.currentTimeMillis());
            String localFilePath = tempFile.toString();
            String remoteFilePath = "/RnS/HDFC/test-file.txt"; // Simulate upload to HDFC folder

            // Upload file
            sftpClient.uploadFile(localFilePath, remoteFilePath);
            System.out.println("File uploaded successfully to: " + remoteFilePath);

            // List subfolders to check for recent files
            List<String> subfolders = Arrays.asList("/RnS/SBI", "/RnS/HDFC", "/RnS/BOB");

            // Find the most recent file
            SftpClientUtil.RecentFileInfo recentFileInfo = sftpClient.findMostRecentFile(subfolders);
            System.out.println("Most recent file found:");
            System.out.println("  Folder: " + recentFileInfo.getFolder());
            System.out.println("  File: " + recentFileInfo.getFileName());
            System.out.println("  Path: " + recentFileInfo.getRemotePath());

            // Download the most recent file
            Path downloadedFile = Files.createTempFile("test-download-", ".txt");
            String downloadedFilePath = downloadedFile.toString();
            sftpClient.downloadFile(recentFileInfo.getRemotePath(), downloadedFilePath);
            System.out.println("File downloaded successfully to: " + downloadedFilePath);

            // Verify content
            String downloadedContent = Files.readString(downloadedFile);
            System.out.println("Downloaded file content: " + downloadedContent);

            // Clean up temporary files (uncomment if needed)
            // Files.delete(tempFile);
            // Files.delete(downloadedFile);

        } catch (JSchException | SftpException | IOException e) {
            System.err.println("Error occurred: " + e.getMessage());
            e.printStackTrace();
        } finally {
            sftpClient.disconnect();
            System.out.println("Disconnected from SFTP server");
        }
    }
}



