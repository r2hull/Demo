package com.epay.merchant.service;

import com.epay.merchant.dao.AdminDao;
import com.epay.merchant.dto.*;
import com.epay.merchant.mapper.MerchantEntityGroupMapper;
import com.epay.merchant.mapper.MerchantMapper;
import com.epay.merchant.model.request.*;
import com.epay.merchant.model.response.*;
import com.epay.merchant.util.MerchantConstant;
import com.epay.merchant.util.enums.MerchantStatus;
import com.epay.merchant.util.enums.NotificationType;
import com.epay.merchant.validator.AdminValidator;
import com.epay.merchant.validator.OnboardingValidator;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AdminServiceTest {

    @Mock
    private OnboardingValidator onboardingValidator;
    
    @Mock
    private AdminValidator adminValidator;
    
    @Mock
    private AdminDao adminDao;
    
    @Mock
    private MerchantEntityGroupMapper merchantEntityGroupMapper;
    
    @Mock
    private MerchantMapper merchantMapper;
    
    @Mock
    private HelpSupportService helpSupportService;
    
    @Mock
    private MerchantBankService merchantBankService;
    
    @InjectMocks
    private AdminService adminService;

    private OnboardingRequest onboardingRequest;
    private OnboardingDto onboardingDto;
    private MerchantDto merchantDto;

    @BeforeEach
    void setUp() {
        onboardingRequest = new OnboardingRequest();
        merchantDto = new MerchantDto();
        onboardingRequest.setMerchant(merchantDto);
        
        onboardingDto = new OnboardingDto();
        onboardingDto.setMerchant(merchantDto);
    }

    @Test
    void onboardingMerchant_ShouldReturnSuccessResponse() {
        // Arrange
        doNothing().when(onboardingValidator).validateOnboardingRequest(any());
        when(adminDao.onboardingMerchantAndMerchantUser(any())).thenReturn(onboardingDto);

        // Act
        MerchantResponse<OnboardingResponse> response = adminService.onboardingMerchant(onboardingRequest);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1L, response.getCount());
        verify(onboardingValidator).validateOnboardingRequest(onboardingRequest);
        verify(adminDao).onboardingMerchantAndMerchantUser(onboardingRequest);
    }

    @Test
    void createMerchantEntityGroup_ShouldReturnSuccessResponse() {
        // Arrange
        MerchantEntityGroupRequest request = new MerchantEntityGroupRequest();
        MerchantEntityGroupDto dto = new MerchantEntityGroupDto();
        MerchantEntityGroupResponse responseObj = new MerchantEntityGroupResponse();

        doNothing().when(adminValidator).entityValidator(any());
        when(merchantEntityGroupMapper.mapEntityRequestToMerchantEntityGroupDto(any())).thenReturn(dto);
        when(adminDao.saveMerchantEntityGroup(any())).thenReturn(dto);
        when(merchantEntityGroupMapper.mapMerchantEntityGroupDtoToEntityResponse(any())).thenReturn(responseObj);

        // Act
        MerchantResponse<MerchantEntityGroupResponse> response = adminService.createMerchantEntityGroup(request);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1L, response.getCount());
        verify(adminValidator).entityValidator(request);
        verify(adminDao).saveMerchantEntityGroup(dto);
    }

    @Test
    void getAllMerchantUsers_ShouldReturnUsersList() {
        // Arrange
        String mId = "MID123";
        Pageable pageable = mock(Pageable.class);
        List<MerchantUserDto> userList = List.of(new MerchantUserDto());
        Page<MerchantUserDto> page = new PageImpl<>(userList);

        when(adminDao.findAllMerchantUsersByMId(mId, pageable)).thenReturn(page);
        when(merchantMapper.mapMerchantUserDTOListToResponseList(userList)).thenReturn(List.of(new MerchantUserResponse()));

        // Act
        MerchantResponse<MerchantUserResponse> response = adminService.getAllMerchantUsers(mId, pageable);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1, response.getCount());
        verify(adminDao).findAllMerchantUsersByMId(mId, pageable);
    }

    @Test
    void userEntityMapping_ShouldReturnSuccessResponse() {
        // Arrange
        UserEntityMappingRequest request = new UserEntityMappingRequest();
        request.setUserId("user1");
        request.setUserName("testUser");
        request.setEntityId("entity123");

        doNothing().when(adminValidator).userEntityRequestValidator(any());
        doNothing().when(adminDao).updateUserRole(anyString(), anyString(), anyString());

        // Act
        MerchantResponse<String> response = adminService.userEntityMapping(request);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals("role has been updated successfully", response.getData().get(0));
        verify(adminValidator).userEntityRequestValidator(request);
        verify(adminDao).updateUserRole(request.getUserId(), request.getUserName(), request.getEntityId());
    }

    @Test
    void saveHelpSupport_ShouldReturnHelpSupportResponse() {
        // Arrange
        String mId = "MID123";
        HelpSupportRequest request = new HelpSupportRequest();
        HelpSupportResponse helpSupportResponse = new HelpSupportResponse();

        when(helpSupportService.saveHelpSupport(mId, request)).thenReturn(MerchantResponse.<HelpSupportResponse>builder()
                .status(MerchantConstant.RESPONSE_SUCCESS)
                .data(List.of(helpSupportResponse))
                .build());

        // Act
        MerchantResponse<HelpSupportResponse> response = adminService.saveHelpSupport(mId, request);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        verify(helpSupportService).saveHelpSupport(mId, request);
    }

    @Test
    void saveFooterInfo_ShouldReturnSuccessMessage() {
        // Arrange
        FotterRequest request = new FotterRequest();
        doNothing().when(adminValidator).footerValidator(any());
        doNothing().when(adminDao).saveFooterRequest(any());

        // Act
        MerchantResponse<String> response = adminService.saveFooterInfo(request);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        verify(adminValidator).footerValidator(request);
        verify(adminDao).saveFooterRequest(request);
    }

    @Test
    void approvedBankAccount_ShouldReturnResponse() {
        // Arrange
        MerchantBankAccountApprovalRequest request = new MerchantBankAccountApprovalRequest();
        when(merchantBankService.approvedBankAccount(any())).thenReturn(MerchantResponse.<String>builder()
                .status(MerchantConstant.RESPONSE_SUCCESS)
                .data(List.of("Approved"))
                .build());

        // Act
        MerchantResponse<String> response = adminService.approvedBankAccount(request);

        // Assert
        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        verify(merchantBankService).approvedBankAccount(request);
    }

}