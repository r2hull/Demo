package com.anm.cts.master.serviceimpl;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;

import com.anm.cts.exception.DataAlreadyExistsException;
import com.anm.cts.exception.DataNotFoundException;
import com.anm.cts.exception.ResourceNotFoundException;
import com.anm.cts.master.request.DesignationDefReq;
import com.anm.cts.master.service.DesignationDefService;
import com.anm.cts.model.CtsDesigleveldef;
import com.anm.cts.model.CtsDesignationdef;
import com.anm.cts.repository.CtsDesigleveldefRepo;
import com.anm.cts.repository.CtsDesignationdefRepo;
import com.anm.cts.response.ColumnItemResponse;
import com.anm.cts.response.ResponseBean;
import com.anm.cts.utils.CommonUtils;
import com.anm.cts.utils.UtilsConstants;

@Component
public class DesignationDefServiceImpl implements DesignationDefService {

	@Autowired
	CtsDesignationdefRepo ctsDesignationdefRepo;
	@Autowired
	CtsDesigleveldefRepo ctsDesigleveldefRepo;

	private static final Logger logger = LogManager.getLogger(DesignationDefServiceImpl.class);

	@Override
	public ResponseBean getDesignationDefList(DesignationDefReq designationDefReq) {
		String designationCode = designationDefReq.getDegnDefCode();
		String designationName = designationDefReq.getDegnDefName();
		String fkDegnLvlId = designationDefReq.getFkDegnLvlId();
		String isActive = designationDefReq.getIsActive();

		int pageNo = Optional.ofNullable(designationDefReq.getPageNo()).orElse(1);
		int pageSize = Optional.ofNullable(designationDefReq.getPageSize()).orElse(10);

		ResponseBean responseBean = new ResponseBean();
		String serviceName = "getDesignationDefList_Service";

		int startIndex = (pageNo - 1);
		Page<CtsDesignationdef> designationList;
		Pageable pageable = PageRequest.of(startIndex, pageSize);

		try {
			designationList = ctsDesignationdefRepo.getDesignationDefList(designationCode, designationName,fkDegnLvlId, isActive,
					pageable);

			if (!designationList.isEmpty()) {
				String message = UtilsConstants.MESSAGE;
				Integer page = pageNo;
				Integer noOfResult = designationList.getContent().size();

				Map<String, String> mainColMap = Map.of("pkDegnDefId", "Id", "degnDefCode", "Designation Code",
						"degnDefName", "Designation Name","fkDegnLvlId", "Designation Level", "isActive", "Is Active");

				List<ColumnItemResponse> columnItemResponses = mainColMap.entrySet().stream()
						.map(entry -> new ColumnItemResponse(entry.getKey(), entry.getValue()))
						.collect(Collectors.toList());

				Long totalResult = designationList.getTotalElements();
				List<DesignationDefReq> response = designationList.stream()
					    .map(this::jsonDesignationdefRes)
					    .collect(Collectors.toList());
				
				List<Object> objList = response.stream().map(obj -> (Object) obj).collect(Collectors.toList());

				return responseBean = new CommonUtils().responseStructure(objList, Instant.now().toEpochMilli(),
						message, serviceName, page, Integer.valueOf(totalResult.toString()), noOfResult,
						columnItemResponses);
			} else {
				responseBean = new CommonUtils().responseForFailed(Instant.now().toEpochMilli(), serviceName);
			}
		} catch (DataAccessException e) {
			logger.error("Data access exception occurred: {}", e.getMessage());
			throw e;
		} catch (Exception e) {
			logger.error("An unexpected exception occurred: {}", e.getMessage());
			throw e;
		}

		return responseBean;
	}
	
	
	public DesignationDefReq jsonDesignationdefRes(CtsDesignationdef obj) {
	    return Stream.of(new DesignationDefReq())
	            .peek(res -> res.setId(obj.getPkDegnDefId()))
	            .peek(res -> res.setDegnDefCode(obj.getDegnDefCode()))
	            .peek(res -> res.setDegnDefName(obj.getDegnDefName()))
	            .peek(res -> {
	            	CtsDesigleveldef ctsDesigleveldef = obj.getCtsDesigleveldef();
	                if (ctsDesigleveldef != null)
	                	res.setFkDegnLvlId(obj.getCtsDesigleveldef().getPkDegnLvlId().toString());
	            })
	            .peek(res -> res.setIsActive(obj.getIsActive()))
	            .findFirst()
	            .orElseThrow();
	}

	@Override
	public ResponseBean addDesignationDef(DesignationDefReq designationDefReq) {
		long timeStamp = Instant.now().toEpochMilli();
		String designationCode = designationDefReq.getDegnDefCode();
		String designationName = designationDefReq.getDegnDefName();
		String isActive =Optional.ofNullable(designationDefReq.getIsActive()).filter(s -> !s.isBlank()).orElse("0");
		ResponseBean responseBean = new ResponseBean();
		HttpStatus httpStatus = HttpStatus.CREATED;

		try {
			if (!designationCode.isEmpty() && !designationName.isEmpty() && !isActive.isEmpty() && !designationDefReq.getFkDegnLvlId().isEmpty() ) {
				if (ctsDesignationdefRepo.existsByDesignationCode(designationCode)) {
					return new ResponseBean(UtilsConstants.FAILED, null, UtilsConstants.ALREADY_EXISTS,
							"addDesignationDef_Service", CommonUtils.currentTimeMillisToLocalTime(timeStamp), null,
							null, null, HttpStatus.BAD_REQUEST.value(), null);
				}
				CtsDesignationdef designationDefObj = new CtsDesignationdef();
				designationDefObj.setDegnDefCode(designationCode);
				designationDefObj.setDegnDefName(designationName);
				
				CtsDesigleveldef ctsDesigLvldefObj = ctsDesigleveldefRepo
						.findById(Long.valueOf(designationDefReq.getFkDegnLvlId()))
						.orElseThrow(() -> new ResourceNotFoundException(UtilsConstants.NO_RECORDS_FOUND));
				designationDefObj.setCtsDesigleveldef(ctsDesigLvldefObj);
				designationDefObj.setIsActive(isActive);
				designationDefObj.setCreatedBy(BigInteger.valueOf(1));
				designationDefObj.setCreatedDate(new Date());
				designationDefObj.setModifiedBy(BigInteger.valueOf(0));
				designationDefObj.setModifiedDate(new Date());
				ctsDesignationdefRepo.save(designationDefObj);

				responseBean.setMessage(httpStatus.getReasonPhrase());
				responseBean.setTimeStamp(CommonUtils.currentTimeMillisToLocalTime(timeStamp));
				responseBean.setCode(httpStatus.value());
				responseBean.setStatus(UtilsConstants.ADDED);
				responseBean.setServiceName("addDesignationDef_Service");
			} else {
				httpStatus = HttpStatus.BAD_REQUEST;
				responseBean.setMessage(httpStatus.getReasonPhrase());
				responseBean.setStatus(UtilsConstants.FAILED);
				responseBean.setCode(httpStatus.value());
			}
		} catch (DataAlreadyExistsException e) {
			logger.error("Data already exists: {}", e.getMessage());
			throw e;
		} catch (Exception e) {
			logger.error("Error adding DesignationDef: {}", e.getMessage());
			throw e;
		}
		return responseBean;
	}

	@Override
	public ResponseBean updateDesignationDef(Long id, DesignationDefReq designationDefReq) {

		ResponseBean responseBean=new ResponseBean();
		long timeStamp = Instant.now().toEpochMilli();
		
		responseBean.setTimeStamp(CommonUtils.currentTimeMillisToLocalTime(timeStamp));
		responseBean.setServiceName("updateDesignationDef_Service");
		try {
			CtsDesignationdef ctsDesObj = ctsDesignationdefRepo.findById(id)
					.orElseThrow(() -> new DataNotFoundException(UtilsConstants.NO_RECORDS_FOUND));

			
			if (ctsDesObj != null) {
				if (isUpdateNeeded(ctsDesObj, designationDefReq)) {
					ctsDesObj.setDegnDefCode(designationDefReq.getDegnDefCode());
					ctsDesObj.setDegnDefName(designationDefReq.getDegnDefName());
					
					CtsDesigleveldef ctsDesigLvldefObj = ctsDesigleveldefRepo
							.findById(Long.valueOf(designationDefReq.getFkDegnLvlId()))
							.orElseThrow(() -> new ResourceNotFoundException(UtilsConstants.NO_RECORDS_FOUND));
					ctsDesObj.setCtsDesigleveldef(ctsDesigLvldefObj);
					
					ctsDesObj.setIsActive(Optional.ofNullable(designationDefReq.getIsActive()).filter(s -> !s.isBlank()).orElse("0"));
					ctsDesObj.setModifiedDate(new Date());
					BigInteger modifiedBy = Optional.ofNullable(ctsDesObj.getModifiedBy()).orElse(BigInteger.valueOf(0));
					ctsDesObj.setModifiedBy(modifiedBy.add(BigInteger.ONE));
					ctsDesignationdefRepo.save(ctsDesObj);
					responseBean.setCode(HttpStatus.OK.value());
					responseBean.setStatus(UtilsConstants.SUCCESSFUL);
					responseBean.setMessage(UtilsConstants.UPDATED);
				} else {
					responseBean.setMessage(UtilsConstants.NO_CHANGES_NEED);
					responseBean.setStatus(UtilsConstants.SUCCESSFUL);
					responseBean.setCode(HttpStatus.NOT_MODIFIED.value());
				}
			} else {
				responseBean.setStatus(UtilsConstants.FAILED);
				responseBean.setMessage(HttpStatus.NOT_FOUND.getReasonPhrase());
				responseBean.setCode(HttpStatus.NOT_FOUND.value());
			}
		} catch (DataNotFoundException e) {

			logger.error(" not found: {}", e.getMessage());

			throw e;
		} catch (org.springframework.dao.DataIntegrityViolationException e) {

			logger.error(" not found: {}", e.getMessage());

			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Error updating  with id {}: {}", id, e.getMessage());

			throw e;
		}
		return responseBean;
	}
	
	private boolean isUpdateNeeded(CtsDesignationdef desObj, DesignationDefReq designationDefReq) {
		return !desObj.getDegnDefName().equals(designationDefReq.getDegnDefName())
				|| !desObj.getDegnDefCode().equals(designationDefReq.getDegnDefCode())
				|| !desObj.getCtsDesigleveldef().getPkDegnLvlId().toString().equals(designationDefReq.getFkDegnLvlId())
		/* || !desObj.getIsActive().equals(designationDefReq.getIsActive()) */;
	}

	@Override
	public ResponseBean deleteDesignationDef(Long id) {
		ResponseBean responseStructure=new ResponseBean();
		long timeStamp = Instant.now().toEpochMilli();
		responseStructure.setTimeStamp(CommonUtils.currentTimeMillisToLocalTime(timeStamp));
		responseStructure.setServiceName("deleteDesignationDef_Service");
		try {
			CtsDesignationdef ctsDesObj = ctsDesignationdefRepo.findById(id)
					.orElseThrow(() -> new DataNotFoundException(UtilsConstants.NO_RECORDS_FOUND));

			ctsDesignationdefRepo.delete(ctsDesObj);
			responseStructure.setMessage(UtilsConstants.DELETE);
			responseStructure.setCode(HttpStatus.OK.value());
			responseStructure.setStatus(UtilsConstants.SUCCESSFUL);
		} catch (DataNotFoundException e) {
			logger.error(" not found with id: {}", e.getMessage());
			throw e;
		} catch (Exception e) {
			logger.error("Error deleting  with id {}: {}", id, e.getMessage());
			throw e;
		}
		return responseStructure;
	
		
		
	}

}