package com.sbi.epay.encryptdecrypt.util.enums;

import lombok.Getter;

@Getter
public enum SecretKeyLength {

    AES_128(128),
    AES_192(192),
    AES_256(256),
    AES_512(512);

    private final int lengthInBits;

    SecretKeyLength(int lengthInBits) {
        this.lengthInBits = lengthInBits;
    }
}



package com.epay.transaction.util.enums;

import com.epay.transaction.exceptions.TransactionException;
import com.epay.transaction.util.TransactionErrorConstants;
import lombok.Getter;

import java.text.MessageFormat;
import java.util.Arrays;

@Getter
public enum OperatingMode {
    DOM("DOM"), INTL ("INTL");

    private final String label;
    OperatingMode(String label) {
        this.label = label;
    }

    public static OperatingMode getOperatingMode(String label) {
        return Arrays.stream(values()).filter(p -> p.getLabel().equalsIgnoreCase(label)).findFirst().orElseThrow(() -> new TransactionException(TransactionErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(TransactionErrorConstants.INVALID_ERROR_MESSAGE, "OperatingMode", "Valid OperatingMode are " + Arrays.toString(OperatingMode.values()))));
    }
}
