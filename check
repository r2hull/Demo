package com.epay.merchant.service;

import com.epay.merchant.dao.AlertDao;
import com.epay.merchant.dto.AlertManagementDto;
import com.epay.merchant.dto.AlertMasterDto;
import com.epay.merchant.dto.ReportAlertDto;
import com.epay.merchant.model.response.AlertManagementResponse;
import com.epay.merchant.model.response.MerchantResponse;
import com.epay.merchant.util.MerchantConstant;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.List;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AlertServiceTest {

    @Mock
    private AlertDao alertDao;

    @InjectMocks
    private AlertService alertService;

    private AlertMasterDto alertMasterDto;
    private ReportAlertDto reportAlertDto;

    @BeforeEach
    void setUp() {
        alertMasterDto = new AlertMasterDto();
        alertMasterDto.setId(1L);
        alertMasterDto.setValue("7");
        alertMasterDto.setDescription("Account Expiry in 7 days");

        reportAlertDto = new ReportAlertDto();
        reportAlertDto.setMId("MID123");
        reportAlertDto.setReportName("Daily Report");
    }

    @Test
    void shouldReturnAlertsByMId() {
        when(alertDao.getLatest50UnreadAlertDescription("MID123"))
                .thenReturn(List.of(new AlertManagementResponse()));

        MerchantResponse<AlertManagementResponse> response = alertService.getAlertsByMId("MID123");

        assertEquals(MerchantConstant.RESPONSE_SUCCESS, response.getStatus());
        assertEquals(1, response.getCount());
        verify(alertDao, times(1)).getLatest50UnreadAlertDescription("MID123");
    }

    @Test
    void shouldUpdateAlertViewStatus() {
        doNothing().when(alertDao).updateViewStatus("MID123", 1001L);

        MerchantResponse<String> response = alertService.updateAlertViewStatus("MID123", 1001L);

        assertEquals("View updated successfully", response.getData().get(0));
        verify(alertDao, times(1)).updateViewStatus("MID123", 1001L);
    }

    @Test
    void shouldGenerateAlertForMerchantAccountExpiry() {
        when(alertDao.findAllAlertByName(MerchantConstant.ACCOUNT_EXPIRY))
                .thenReturn(List.of(alertMasterDto));

        when(alertDao.getMIdsWithExpiryDays(anyList()))
                .thenReturn(Map.of("7", "MID123"));

        doNothing().when(alertDao).saveAllToAlertManagement(anyList());

        alertService.generateAlertForMerchantAccountExpiry();

        verify(alertDao, times(1)).findAllAlertByName(MerchantConstant.ACCOUNT_EXPIRY);
        verify(alertDao, times(1)).getMIdsWithExpiryDays(anyList());
        verify(alertDao, times(1)).saveAllToAlertManagement(anyList());
    }

    @Test
    void shouldGenerateAlertForReport() {
        doNothing().when(alertDao).generateAlertForReport(reportAlertDto);

        alertService.generateAlertForReport(reportAlertDto);

        verify(alertDao, times(1)).generateAlertForReport(reportAlertDto);
    }
}