package com.epay.reporting.exceptionhandlers;

import com.epay.reporting.dto.ErrorDto;
import com.epay.reporting.exception.ReportingException;
import com.epay.reporting.exception.ValidationException;
import com.epay.reporting.model.response.ReportingResponse;
import com.epay.reporting.util.ErrorConstants;
import com.epay.reporting.util.ReportingConstant;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.ConstraintViolationException;
import org.hibernate.exception.SQLGrammarException;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.ArrayList;
import java.util.List;

/**
 * Global exception handler for handling all application-level exceptions.
 */
@ControllerAdvice
public class ReportingExceptionHandler extends ResponseEntityExceptionHandler {

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Handles ReportingException and returns a structured error response.
     */
    @ExceptionHandler(value = {ReportingException.class})
    public ResponseEntity<Object> handleEPayServiceException(RuntimeException ex) {
        logger.error("ReportingException occurred: {}", ex.getMessage(), ex);

        ErrorDto errorDto = (ex instanceof ReportingException me)
                ? ErrorDto.builder().errorCode(me.getErrorCode()).errorMessage(me.getErrorMessage()).build()
                : ErrorDto.builder().errorCode(ErrorConstants.GENERIC_ERROR_CODE).errorMessage(ex.getLocalizedMessage()).build();

        return generateResponseWithErrors(List.of(errorDto));
    }

    /**
     * Handles ValidationException and returns validation errors.
     */
    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<Object> handleValidationException(ValidationException ex) {
        logger.error("ValidationException occurred: {}", ex.getMessage(), ex);

        if (CollectionUtils.isEmpty(ex.getErrorMessages())) {
            ErrorDto errorDto = ErrorDto.builder().errorCode(ex.getErrorCode()).errorMessage(ex.getErrorMessage()).build();
            return generateResponseWithErrors(List.of(errorDto));
        }
        return generateResponseWithErrors(ex.getErrorMessages());
    }

    /**
     * Handles database-related exceptions like DataIntegrityViolationException, DataAccessException, etc.
     */
    @ExceptionHandler(value = {DataAccessException.class, DataIntegrityViolationException.class, ConstraintViolationException.class, SQLGrammarException.class})
    public ResponseEntity<Object> handleDBException(Exception ex) {
        logger.error("Database exception occurred: {}", ex.getMessage(), ex);

        String errorMessage = switch (ex) {
            case DataIntegrityViolationException de -> de.getMostSpecificCause().getMessage();
            case DataAccessException de -> de.getMostSpecificCause().getMessage();
            case ConstraintViolationException de -> de.getConstraintViolations().toString();
            case SQLGrammarException de -> de.getLocalizedMessage();
            default -> ex.getMessage();
        };

        ErrorDto errorDto = ErrorDto.builder().errorCode(ErrorConstants.GENERIC_ERROR_CODE).errorMessage(errorMessage).build();
        return ResponseEntity.internalServerError().body(
                ReportingResponse.builder().status(ReportingConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build()
        );
    }

    /**
     * Handles generic exceptions and returns an internal server error response.
     */
    @ExceptionHandler(value = {Exception.class})
    public ResponseEntity<Object> handleGenericException(Exception ex) {
        logger.error("Unhandled exception occurred: {}", ex.getMessage(), ex);

        ErrorDto errorDto = ErrorDto.builder()
                .errorCode(String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value()))
                .errorMessage(ex.getMessage())
                .build();

        return ResponseEntity.internalServerError().body(
                ReportingResponse.builder().status(ReportingConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build()
        );
    }

    /**
     * Handles IllegalArgumentException and IllegalStateException.
     */
    @ExceptionHandler(value = {IllegalArgumentException.class, IllegalStateException.class})
    protected ResponseEntity<Object> handleConflict(RuntimeException ex) {
        logger.error("Conflict exception occurred: {}", ex.getMessage(), ex);

        ErrorDto errorDto = ErrorDto.builder()
                .errorCode(String.valueOf(HttpStatus.CONFLICT.value()))
                .errorMessage(ex.getLocalizedMessage())
                .build();

        return ResponseEntity.status(HttpStatus.CONFLICT).body(
                ReportingResponse.builder().status(ReportingConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build()
        );
    }

    /**
     * Handles Spring framework's internal exceptions.
     */
    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatusCode statusCode, WebRequest request) {
        logger.error("Spring internal exception occurred: {}", ex.getMessage(), ex);

        if (request instanceof ServletWebRequest servletWebRequest) {
            HttpServletResponse response = servletWebRequest.getResponse();
            if (response != null && response.isCommitted()) {
                return null;
            }
        }

        ErrorDto errorDto = ErrorDto.builder()
                .errorCode(String.valueOf(statusCode.value()))
                .errorMessage(ex.getLocalizedMessage())
                .build();

        return ResponseEntity.status(statusCode).body(
                ReportingResponse.builder().status(ReportingConstant.RESPONSE_FAILURE).errors(List.of(errorDto)).build()
        );
    }

    /**
     * Handles validation errors in method arguments.
     */
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {

        logger.error("Method argument validation failed: {}", ex.getMessage(), ex);

        List<ErrorDto> errors = new ArrayList<>();
        ex.getBindingResult().getFieldErrors().forEach(fieldError ->
                errors.add(ErrorDto.builder()
                        .errorCode(ErrorConstants.MANDATORY_ERROR_CODE)
                        .errorMessage(fieldError.getField() + " " + fieldError.getDefaultMessage())
                        .build())
        );

        return ResponseEntity.status(HttpStatus.OK).body(
                ReportingResponse.builder().status(ReportingConstant.RESPONSE_FAILURE).errors(errors).build()
        );
    }

    /**
     * Generates a standard error response.
     */
    private ResponseEntity<Object> generateResponseWithErrors(List<ErrorDto> errors) {
        logger.info("Returning error response with {} errors", errors.size());
        return ResponseEntity.ok().body(
                ReportingResponse.builder().status(ReportingConstant.RESPONSE_FAILURE).errors(errors).build()
        );
    }
}