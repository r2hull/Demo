public TransactionResponse<TransactionTokenResponse> generateTransactionToken(String businessUrl, String orderHash, DeviceDetailsRequest deviceDetailsRequest, String clientIp) {
    logger.info("Starting transaction token generation request for orderHash {}", orderHash);
    tokenValidator.validateOrderHash(orderHash);

    // Step 1: Save Device Details
    if (ObjectUtils.isNotEmpty(deviceDetailsRequest)) {
        logger.debug("Going to save device details, deviceDetails: {} and client ip: {}", deviceDetailsRequest, clientIp);
        deviceDetailsRequest.setClientIp(clientIp);
        tokenDao.saveTransactionRequestedDeviceInfo(buildTransactionDeviceInfoDto(orderHash, deviceDetailsRequest));
    }

    // Step 2: Check if a token already exists for the given orderHash
    logger.info("Fetching existing valid token by orderHash");
    Optional<Token> existingToken = tokenRepository.findLatestTokenByOrderHash(orderHash);
    if (existingToken.isPresent()) {
        Token token = existingToken.get();
        if (TokenStatus.INACTIVE.equals(token.getStatus())) {
            logger.debug("Token status is inactive for orderHash: {}", orderHash);
            throw new TransactionException(ATTEMPT_EXPIRED_ERROR_CODE, ATTEMPT_EXPIRED_ERROR_MESSAGE);
        }
        if (TokenStatus.ACTIVE.equals(token.getStatus())) {
            logger.info("Valid token already exists for orderHash: {}", orderHash);
            // Build response with existing token and hval
            TransactionTokenResponse transactionTokenResponse = TransactionTokenResponse.builder()
                    .token(token.getGeneratedToken())
                    .hval(token.getAesKey())
                    .build();
            logger.debug("Returning existing transaction token response: {}", transactionTokenResponse);
            return TransactionResponse.<TransactionTokenResponse>builder()
                    .data(List.of(transactionTokenResponse))
                    .status(TransactionConstant.RESPONSE_SUCCESS)
                    .build();
        }
    }

    // Step 3: Get Merchant Order By Order Hash
    OrderDto orderDto = tokenDao.getMerchantOrderByOrderHash(orderHash);
    logger.debug("Received details of merchant order, orderDto: {}", orderDto);

    // Step 4: Get Merchant By MID For Token Expiration Time
    MerchantInfoResponse merchantDto = tokenDao.getMerchantByMId(orderDto.getMId());
    logger.debug("Received details of Merchant, merchantDto: {}", merchantDto);

    // Step 5: Validate Business URL passed in x-referrer header
    tokenValidator.validateBusinessUrl(businessUrl, merchantDto.getMerchantBusinessUrl());
    logger.debug("Business url:{} validated for mId: {}", businessUrl, merchantDto.getMId());

    // Step 6: Token Generation (only if no valid token exists)
    TransactionTokenResponse transactionTokenResponse = generatingTransactionToken(orderDto, merchantDto.getTransactionTokenExpiryTime());
    logger.info("Completed transaction token generation request for orderHash {}", orderHash);

    logger.debug("Received transaction token response: {}", transactionTokenResponse);

    return TransactionResponse.<TransactionTokenResponse>builder()
            .data(List.of(transactionTokenResponse))
            .status(TransactionConstant.RESPONSE_SUCCESS)
            .build();
}